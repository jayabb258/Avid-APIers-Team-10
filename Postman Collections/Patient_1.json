{
	"info": {
		"_postman_id": "401e7bf0-2abc-41b6-95df-a455883b5303",
		"name": "Team-10 Avid APIers",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Admin User Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"AdminToken\", token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"});\r",
									"\r",
									"//pm.execution.setNextRequest(\"Gather Dietitian Credentials\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd404be5-f558-425d-980a-25ed82264b42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\":\"{{AdminPassword}}\",\r\n  \"userLoginEmail\":\"{{AdminEmail}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "CreateDietcian2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const id = responseBody.id;\r",
									"    const loginPassword = responseBody.loginPassword;\r",
									"    const Email = responseBody.Email;\r",
									"    pm.globals.set(\"DieticianId2\", id);\r",
									"    pm.globals.set(\"Dieticianpassword2\", loginPassword);\r",
									"    pm.globals.set(\"DieticianEmail2\", Email);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"loginPassword\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalStreet\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalCity\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalPincode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Education\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"loginPassword\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\",\r",
									"        \"HospitalName\",\r",
									"        \"HospitalStreet\",\r",
									"        \"HospitalCity\",\r",
									"        \"HospitalPincode\",\r",
									"        \"Education\"\r",
									"    ]\r",
									"};\r",
									"pm.test('Schema Validation', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\"); // Changed to \"Created\"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the presence of required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    const requiredFields = [\r",
									"        \"id\", \r",
									"        \"loginPassword\", \r",
									"        \"Firstname\", \r",
									"        \"Lastname\", \r",
									"        \"ContactNumber\", \r",
									"        \"DateOfBirth\", \r",
									"        \"Email\", \r",
									"        \"HospitalName\", \r",
									"        \"HospitalStreet\", \r",
									"        \"HospitalCity\", \r",
									"        \"HospitalPincode\", \r",
									"        \"Education\"\r",
									"    ];\r",
									"    \r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(responseData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Id should be an number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.be.an('number'); // Changed to 'integer'\r",
									"});\r",
									"\r",
									"pm.test(\"LoginPassword should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Other fields should be strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    for (const key in responseData) {\r",
									"        if (key !== 'id' && key !== 'loginPassword') {\r",
									"            pm.expect(responseData[key]).to.be.a('string');\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d422e917-9e37-47ff-b0b7-fa85df4f5755",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdminToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/dietician"
					},
					"response": []
				},
				{
					"name": "DieticianControllerlogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d7f31aa-4a5d-4fd6-9d7d-423874b98716",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"DieticianToken2\", token);\r",
									"\r",
									"\r",
									"\r",
									"});pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Create New Patient2\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"DieticianToken2\", token);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set the next request to 'Create New Patient2'\", function () {\r",
									"    pm.execution.setNextRequest(\"Create New Patient2\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9306532d-fcc7-4f9e-bab4-7ff8d8953562",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "20511210-767f-43fd-ba83-5a37cbc52a61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdminToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\":\"{{Dieticianpassword2}}\",\r\n  \"userLoginEmail\":\"{{DieticianEmail2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create New Patient2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdafeb03-c004-4f74-8c66-0b02f0793a89",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"     const Email = responseBody.Email;\r",
									"    const patientId = responseBody.patientId;\r",
									"    pm.globals.set(\"PatientEmail2\",Email );\r",
									"    pm.globals.set(\"PatientId2\", patientId);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d46f3e28-5adc-46a7-9e81-bdd6bca5803f",
								"exec": [
									"",
									"",
									"// Load lodash library code",
									"const lodash = require('lodash');",
									"",
									"",
									"//Select Random Allergy",
									"var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
									"",
									"pm.environment.set(\"allergyKB1\",allergy);",
									"",
									"// Select Random cuisine",
									"",
									"",
									"var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
									"",
									"pm.environment.set(\"cuisineKB1\",cuisine);",
									"",
									"//select Random food preference",
									"",
									"var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
									"",
									"pm.environment.set(\"foodpref1\",foodpref);",
									"",
									"",
									"//Generate random contact number",
									"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
									"pm.environment.set(\"phoneptKB1\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
									"",
									"",
									"// //generate random email address",
									"",
									"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
									"// pm.environment.set(\"mailptKB\",mail);",
									"",
									"//generate random DOB",
									"",
									"// var moment = require(\"moment\");",
									"// pm.environment.set(\"DOBkb\", moment().subtract(18, \"years\").format((\"YYYY-MM-DD\")));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8ea32ca8-5a27-4068-92fe-de18e14146a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DieticianToken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{firstNamePat1}}\",\n\"LastName\": \"{{lastNamePat1}}\",\n\"ContactNumber\": \"{{phoneptKB1}}\",\n\"Email\": \"{{PatientEmail}}\",\n\"Allergy\": \"{{allergyKB1}}\",\n\"FoodPreference\": \"{{foodpref1}}\",\n\"CuisineCategory\":\"{{cuisineKB1}}\",\n\"DateOfBirth\": \"{{DOB}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef538fb-527f-4c20-ac44-8c5c1d22a3be"
								}
							]
						},
						"url": "{{BaseURL}}/patient"
					},
					"response": []
				},
				{
					"name": "Patientlogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2f8bf70-1685-4f79-9a54-20533e410e1d",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"PatientToken2\", token);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f2eebef4-b559-4744-aa54-2d6feb8ad055",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DieticianToken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{AdminPassword}}\",\r\n  \"userLoginEmail\": \"{{PatientEmail2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Patient Login Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aece70e2-160a-4530-8619-6f3b9479ef4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"invalidPassword\",\r\n  \"userLoginEmail\": \"invalid@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Admin User Login with invalid credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b4038bd3-7f8a-4b4e-aeb0-5229c20846d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"invalidPassword\",\r\n  \"userLoginEmail\": \"invalid@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				}
			],
			"id": "513eaa1c-4f7f-46ab-b199-bb43bd217268",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d5d4647-187b-4fd9-b99c-a04b156d9068",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8789d544-00e8-4c13-a1ce-4e4b5238d2cd",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "GET AllMorbidities -200- AS ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     \r",
											"    if(i===2)\r",
											"    {\r",
											"      \r",
											"          console.log('morbidity name',responseBody[i].morbidityTestName) \r",
											"\r",
											" pm.globals.set(\"morbidity_test_name\", responseBody[i].morbidityTestName)\r",
											"}\r",
											"\r",
											"}\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5d6d5ca7-d1a4-414b-a37a-236f4d58f3b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET AllMorbidities -200- AS DIETICIAN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824122c3-d3be-4d68-97ff-99b109d0ef0d",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response time is less than 100ms\", function () {\r",
											"//     pm.response.to.have.responseTimeBelow(500);\r",
											"// });\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.environment.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.environment.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.environment.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_TSH',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"}\r",
											"})\r",
											"\r",
											"// const testUtil = pm.require(\"morbidity_module_testutil\");\r",
											"\r",
											"// testUtil.commonTest(\"GET\",\"content-type header\");\r",
											"// testUtil.commonTest(\"GET\",\"content-type response\");\r",
											"// testUtil.commonTest(\"GET\",\"response time\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf1b7ea9-33bb-4302-bc47-da4a804e895b",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7cfe48de-2b57-4052-8014-f87d91e0bf2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e81fa7f4-8b31-447d-9b63-3fcc6a77141b",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aba9ef7a-7ed0-434f-b785-0099d46ba2cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_HBA1C}}"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e81fa7f4-8b31-447d-9b63-3fcc6a77141b",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7cbc9434-3f67-43ca-80dc-a85691542659",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_HBA1C}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73f4a42f-ebe0-4181-ae0e-f87c44a2a612",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "32d1a37c-736d-4424-a7cd-0cd7eed553ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Average_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73f4a42f-ebe0-4181-ae0e-f87c44a2a612",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cf40cd61-5806-4111-9ee3-b8ca0a81a78f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Average_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe1f6f8-3989-4110-b090-2231489f4d06",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "61b983af-6630-494c-9d95-4673a6065626",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Fasting_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe1f6f8-3989-4110-b090-2231489f4d06",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c3cb41ad-189c-4bfe-8505-988fb7eac7a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Fasting_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ddc4d1a-dfaa-4d69-913e-888d9fe4c7ef",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d474f0de-cb0a-414e-ad9a-657a9c5d55c5",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5afb5fe2-64f7-498e-81dc-e2215e6c0a3c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Plasma_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ddc4d1a-dfaa-4d69-913e-888d9fe4c7ef",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d474f0de-cb0a-414e-ad9a-657a9c5d55c5",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c727b669-197c-41d8-93c4-32fb652ad9ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Plasma_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69dbb6c8-4a6b-4ed6-bfdf-67d896dcd0e9",
										"exec": [
											"const thyroidT4=pm.environment.get('thyroid_T4');\r",
											"if(thyroidT4==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T4',T4)\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6ca2b6c-6d0e-495f-8d59-c7cd79740211",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eb3cdbf5-1cf2-4ef0-94cf-82a277060391",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T4}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4 AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69dbb6c8-4a6b-4ed6-bfdf-67d896dcd0e9",
										"exec": [
											"const thyroidT4=pm.environment.get('thyroid_T4');\r",
											"if(thyroidT4==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T4',T4)\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6ca2b6c-6d0e-495f-8d59-c7cd79740211",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "251d9ff6-d20b-41fc-a3fe-df4cda9c30b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T4}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "950286ed-c4e7-4d15-8c3a-10d84ce81c0b",
										"exec": [
											"const thyroidT3=pm.environment.get('thyroid_T3');\r",
											"if(thyroidT3==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T3',T3)\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c316b173-2b6c-4d5c-a23e-7e972532d41a",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ff544178-d19e-4fab-a88c-f61f734694ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T3}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3 AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "950286ed-c4e7-4d15-8c3a-10d84ce81c0b",
										"exec": [
											"const thyroidT3=pm.environment.get('thyroid_T3');\r",
											"if(thyroidT3==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T3',T3)\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c316b173-2b6c-4d5c-a23e-7e972532d41a",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f9b72e98-ae70-4982-a492-ab63b6483401",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T3}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test TSH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b43faf76-5fce-4117-ad37-e5badf6993c3",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "520976f2-8390-41bf-b129-54a4bde17efa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_TSH}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test TSH AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b43faf76-5fce-4117-ad37-e5badf6993c3",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8334133d-c877-4089-b27c-d2ead5d86365",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_TSH}}"
							},
							"response": []
						}
					],
					"id": "0c4fabc2-5a70-4aa0-906e-2dff2ef8d58d"
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "GET operation -200- AS ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9deee48a-08f3-40bb-9abc-560afcaecb67",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "17a6d95e-8bb0-40b6-a791-30af74fd746b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET Morbidities with valid PatientToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbcdfa96-f59f-4a00-9429-9a2b77463a49",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.collectionVariables.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_TSH ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T4 ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											"}})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2853ea7e-abcc-4cea-bed6-734ed154311b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Bearertk}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET AllMorbidities withinvalid endpoint- AS DIETICIAN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbcdfa96-f59f-4a00-9429-9a2b77463a49",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.collectionVariables.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_TSH ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T4 ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											"}})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2fe47ebe-1b89-4e3a-bafb-881ba3586c54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity with wrong testname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d2ac6e9-e4b3-442d-87d0-3fc54d7dc0bb",
										"exec": [
											"//First do pm.collectionVariables.get('arrayname')\r",
											"const testNameMap =pm.collectionVariables.get('MorbidityTestNames');\r",
											"//const data=pm.collectionVariables.get('MorbidityTestNames');\r",
											"\r",
											"console.log(testNameMap);\r",
											"\r",
											"function getTestNameById(MorbidityId) {\r",
											"\r",
											"    for(i=0;i<testNameMap.length;i++)\r",
											"    {\r",
											"        const morbidity_id=testNameMap[i].morbidityId;\r",
											"        console.log('morbidity_id---',morbidity_id);\r",
											"        if(morbidity_id==='DIA_FG')\r",
											"        {\r",
											"            console.log('testNameMap[i].morbidityTestName',testNameMap[i].morbidityTestName);\r",
											"    pm.collectionVariables.set('MorbidityTestNames',testNameMap[i].morbidityTestName);\r",
											"        }\r",
											"\r",
											"\r",
											"       // console.log('morbidity name',responseBody[i].morbidityTestName)\r",
											"       // if(testNameMap[i].MorbidityIdmorbidityTestName)\r",
											"    }\r",
											"//    // const item = testNameMap.find(obj => obj.morbidityTestId === MorbidityId);\r",
											"//    console.log('MorbidityId',MorbidityId)\r",
											"// console.log('found morbity test nameeeeeeeeeeeee',item)\r",
											"//     return item ? item.morbidityTestName : null; // Return null if not found\r",
											"}\r",
											"\r",
											"// Example usage\r",
											"// const morbidityTestName = getTestNameById(\"DIA_FG\");\r",
											"// console.log(morbidityTestName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53d2e935-30d4-45fe-b3a7-54cb2e6e6b28",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dc943899-d83c-47be-a9d8-f427fc36922b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/fever"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid  invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1200a1a5-91fc-448f-b700-91115d1ee287",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f7ee619d-68e1-44c3-b7a7-906e70b12500",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/TSHh"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3 with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9207d2fb-abda-4fb6-ac63-89028a3a6ec1",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "679f37f1-eaa8-4da6-bccd-9538e31bb0cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/T3333333"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4 with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7510da9d-81ac-4de4-b313-454ac009c06a",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "edc23bd5-cf7e-41a5-9444-a8692024786f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/T444"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C negativeTesting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b093a02a-0a35-4e93-a737-d7100e6002d1",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "82e3f49c-e54e-425a-adf1-f8f0b692944f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38807993-9edb-43ec-be5a-dc327c7ab885",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "733e5d0b-1f4d-4c55-a1fd-0dc5fec89df0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/avg glucos"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58bb5d1b-a56c-4f41-920f-835aca16f794",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aefb3270-b733-43fe-bf06-9e282c7e8f84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/fasting glucose123"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose with inavalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40738e37-4bad-47c8-b614-bcc2ae270bc9",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "759e9d97-e1b3-4458-9d3e-b2e22d011107",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/plasma glucoseeee"
							},
							"response": []
						},
						{
							"name": "GET using Dietician Token",
							"id": "5ca38526-2e37-4239-b645-e6eec8425f24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						}
					],
					"id": "04ccc54a-5c4b-4625-bfff-512e351af8a1"
				}
			],
			"id": "987a9a55-271e-4066-915d-ef97a3cae6b6"
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "GetALLDieticians",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// Schema validation for the response\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    var schema = {\r",
											"        type: \"array\",\r",
											"        items: {\r",
											"            type: \"object\",\r",
											"            properties: {\r",
											"                id: { type: \"number\" },\r",
											"                Firstname: { type: \"string\" },\r",
											"                Lastname: { type: \"string\" },\r",
											"                ContactNumber: { type: \"string\" },\r",
											"                DateOfBirth: { type: \"string\" },\r",
											"                Email: { type: \"string\" }\r",
											"            },\r",
											"            required: [\"id\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\"]\r",
											"        }\r",
											"    };\r",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5ca41ea5-b075-4c7c-9548-8fb547d8c746",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "CreateDietcian",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const id = responseBody.id;\r",
											"    const loginPassword = responseBody.loginPassword;\r",
											"    const Email = responseBody.Email;\r",
											"    pm.globals.set(\"DieticianId\", id);\r",
											"    pm.globals.set(\"Dieticianpassword\", loginPassword);\r",
											"    pm.globals.set(\"DieticianEmail\", Email);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"var expectedSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"loginPassword\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Firstname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Lastname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"ContactNumber\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"DateOfBirth\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Email\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalName\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalStreet\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalCity\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalPincode\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Education\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"id\",\r",
											"        \"loginPassword\",\r",
											"        \"Firstname\",\r",
											"        \"Lastname\",\r",
											"        \"ContactNumber\",\r",
											"        \"DateOfBirth\",\r",
											"        \"Email\",\r",
											"        \"HospitalName\",\r",
											"        \"HospitalStreet\",\r",
											"        \"HospitalCity\",\r",
											"        \"HospitalPincode\",\r",
											"        \"Education\"\r",
											"    ]\r",
											"};\r",
											"pm.test('Schema Validation', () => {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the presence of required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    const requiredFields = [\r",
											"        \"id\", \r",
											"        \"loginPassword\", \r",
											"        \"Firstname\", \r",
											"        \"Lastname\", \r",
											"        \"ContactNumber\", \r",
											"        \"DateOfBirth\", \r",
											"        \"Email\", \r",
											"        \"HospitalName\", \r",
											"        \"HospitalStreet\", \r",
											"        \"HospitalCity\", \r",
											"        \"HospitalPincode\", \r",
											"        \"Education\"\r",
											"    ];\r",
											"    \r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is present in the response\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Cache-Control header is present in the response\", function () {\r",
											"    pm.response.to.have.header(\"Cache-Control\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"pm.test(\"Id should be an integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.id).to.be.an('number');\r",
											"});\r",
											"\r",
											"pm.test(\"LoginPassword should be a string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Other fields should be strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    for (const key in responseData) {\r",
											"        if (key !== 'id' && key !== 'loginPassword') {\r",
											"            pm.expect(responseData[key]).to.be.a('string');\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
										"exec": [
											"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number\r",
											"pm.environment.set(\"phoneDtN\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "40acb12f-118f-4dbe-b570-dbde16ab67c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{phoneDtN}}\",\r\n  \"DateOfBirth\": \"{{Dobdt1}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Update Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist;\r",
											"    pm.expect(responseData.Firstname).to.exist;\r",
											"    pm.expect(responseData.Lastname).to.exist;\r",
											"    pm.expect(responseData.ContactNumber).to.exist;\r",
											"    pm.expect(responseData.DateOfBirth).to.exist;\r",
											"    pm.expect(responseData.Email).to.exist;\r",
											"    pm.expect(responseData.HospitalName).to.exist;\r",
											"    pm.expect(responseData.HospitalStreet).to.exist;\r",
											"    pm.expect(responseData.HospitalCity).to.exist;\r",
											"    pm.expect(responseData.HospitalPincode).to.exist;\r",
											"    pm.expect(responseData.Education).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ContactNumber is in a valid format\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.ContactNumber).to.match(/^\\d{10}$/);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"var expectedSchema ={\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type Header is application-json\", () => {\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											"\r",
											"   "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "24c185f6-7b30-4d8f-9303-9ac07f2389b0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "GetDieticianwithID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"    pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5e2d80d7-be55-4c31-a455-6b645b90e242",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Delete dietcian By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"/*var expectedSchema = \r",
											"    {\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"message\": {\r",
											"      \"type\": \"string\",\r",
											"      \"pattern\": \"^Deleted dietician with id-\\\\d+$\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\"message\"],\r",
											"  \"additionalProperties\": false\r",
											"}\r",
											"pm.test('Schema Validation', function () {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});*/\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response message is a non-empty string\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bcf4049a-e667-484d-9cba-0d46f6f2b7cd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						}
					],
					"id": "5b9ed836-efca-4752-9996-49cd2247aca1"
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Create a Dietician without AdminbearerToken Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response status code name is Unauthorized\", function () {\r",
											"    pm.expect(pm.response).to.have.status(401);\r",
											"    pm.expect(pm.response.status).to.equal('Unauthorized');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is present\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response schema includes timestamp, status, error, and path properties\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('timestamp');\r",
											"    pm.expect(responseData).to.have.property('status');\r",
											"    pm.expect(responseData).to.have.property('error');\r",
											"    pm.expect(responseData).to.have.property('path');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ec78d7ac-aaf4-4a48-9bca-4f64f85ffea4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  existing values in contactnumber and email id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"\r",
											"   \r",
											"    \r",
											" \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"var expectedSchema = {\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errorCode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"errorMessage\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errorCode\",\r",
											"    \"errorMessage\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"\r",
											"    pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b1cc92bb-0e31-4250-b08b-9b0417cc31a4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  MissingMandatory Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"      \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has valid schema\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      contact: {\r",
											"        type: \"string\"\r",
											"      }\r",
											"    },\r",
											"    required: [\"contact\"]\r",
											"  };\r",
											"\r",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "69ff9190-9e3b-48e0-b6b9-a3c728b5ae4a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  Check if user able to create a Dietician with (less than 10 number in contact number field )",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"var expectedSchema = {\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"contact\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"contact\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0b7608a9-2086-4b62-a9c2-69a455dcfb72",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  Check if user able to create a Dietician with invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"var expectedSchema = {\r",
											"  \r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"userLoginEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"userLoginEmail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "48c62a5e-a489-4828-b95f-cc636ec4af9c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{InvalidEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician Checking   firstname and last field accept only alpahabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"var expectedSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"lastName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"firstName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"lastName\",\r",
											"    \"firstName\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "47ceff02-413d-45f7-9b76-de2aed3272c8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{FirstnameN}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{LastnameN}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician, passing the DateOfBirth field without following the correct DateOfBirth format (yyyy-d-m).",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0a6f00e7-8253-4e25-bee5-569f8224792a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthformat}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Dateofbirth field accept only Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fc01876a-56c6-4ac8-8a84-e43c6971b2e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthN}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Hospitalpincode field accept only 6digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bf538532-da54-436d-83a8-f9ea71e782f9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeN}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Hospitalpincode field accept any alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "61f099e9-4126-4c78-bbee-c306a821f948",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeA}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Update Diectician Without Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb7689d8-9fc9-471b-a8e2-9154d36116e3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "47cbb964-a3ce-4c0d-8f77-b364173b8182",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail2}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Update Diectician With missing mandatory field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb7689d8-9fc9-471b-a8e2-9154d36116e3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c13b2b83-0220-4ceb-9ba8-c1cf14b7fcdb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Update Dietician with Invalid Dietician Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"var expectedSchema={\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errorCode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"errorMessage\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errorCode\",\r",
											"    \"errorMessage\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "83a8852a-0293-484e-a856-54326b57ade4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail2}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "All Dietician Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e79cf361-5b1c-497b-a2b9-add640918055",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2fd2e64e-8ea0-4815-9196-503809664da0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician1"
							},
							"response": []
						},
						{
							"name": "DieticianID Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "884438d9-c4c7-46d0-9cf5-f5fb2089c7c7",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6be6fa18-fa0a-4969-a27e-7b60170405c0",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "75ac1054-4ebd-48e4-b4a6-05bd4d9d7068",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "DietcianID Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13cf1ad7-1f9e-4fe3-b38a-4ffbf9e2421c",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5a75872a-a567-42f6-8c09-443b3186c7eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						}
					],
					"id": "36b6a6f8-e7fc-46fe-aaad-912cebc00261"
				},
				{
					"name": "Dietician Controlller",
					"item": [
						{
							"name": "Get all dieticians",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a043726-44a7-42ad-aa9a-78915cf1f0f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f6cd98cd-0f24-430e-a37b-377f94f6aeca",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Get with Dieticianid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a043726-44a7-42ad-aa9a-78915cf1f0f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6c3e8f5c-7621-47ad-b97e-94563c439544",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/dietician/{{DieticianId2}}"
							},
							"response": []
						}
					],
					"id": "3c4f0f6b-fc4e-4b3f-82ca-1f31450fd17f"
				}
			],
			"id": "4d22cae5-9e79-4015-b336-c8e331592c97"
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "1.\tCreate New Patient positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// Load lodash library code",
											"const lodash = require('lodash');",
											"",
											"",
											"//Select Random Allergy",
											"var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// Select Random cuisine",
											"",
											"",
											"var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"//select Random food preference",
											"",
											"var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"//Generate random contact number",
											"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"//generate random email address",
											"",
											"let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"pm.environment.set(\"mailptKB\",mail);",
											"",
											"//generate random DOB",
											"",
											"var moment = require(\"moment\");",
											"pm.environment.set(\"DOBkb\", moment().subtract(18, \"years\").format((\"YYYY-MM-DD\")));",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"//Set environment variable Patient ID  ",
											"",
											"    try{",
											"   pm.expect(response).to.have.own.property(\"patientId\");",
											"   pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"    pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"FAIL - User ID was not created as it already exists or some other error\", () => {throw new Error(e.message)}); ",
											"}",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"// //Retrieve file name",
											"",
											"function getFirstAttributeName(obj) {",
											"    for (var key in obj) {",
											"        if (obj.hasOwnProperty(key)) {",
											"            return key;",
											"        }",
											"    }",
											"    return null;",
											"}",
											"",
											"// Retrieve the first attribute name of the 'user' object",
											"var attributeName = getFirstAttributeName(response.Vitals);",
											"",
											"if (attributeName) {",
											"    // Set the environment variable 'attributeName' to the retrieved attribute name",
											"    pm.environment.set(\"fileidKB\", attributeName);",
											"    console.log(\"Attribute Name: \" + attributeName);",
											"} else {",
											"    console.log(\"No attribute found.\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "caedacb8-51f7-4c29-9ac1-731f5c33c08f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"{{firstNamePat1}}\",\n\"LastName\": \"{{lastNamePat1}}\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOB1}}\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef538fb-527f-4c20-ac44-8c5c1d22a3be"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "2. Update Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cf64f7f-9089-4ddf-811a-8262793e9fa1",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "990cc189-0fd6-499c-a510-bb62e73b8472",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"{{firstNamePatient}}\",\n\"LastName\": \"{{lastNamePatient}}\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOB1}}\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : {{WeightPatient}},\n       “Height” : {{HeightPatient}},\n        “Temperature” : {{TempPatient}},\n        “SP” : {{SPpatient}},\n        “DP” : {{DPpatient}}\n}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "c157b9c9-eb09-4996-8523-43bc87af82d5",
									"name": "3.\tUpdate Patient by UserId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
													"disabled": true
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:25 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Corbett\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1992-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "3.Add New Reports with Vitals for existing Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69d07497-d352-4af6-b557-5e7a1848b0ce",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"// Check if Vitals are updated",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5b2484c1-b6de-45c6-af92-b7e06e12b234",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"{{firstNamePatient}}\",\n\"LastName\": \"{{lastNamePatient}}\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOB1}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\"Weight\" : 168.1,\n\"Height\": 5.4,\n\"Temperature\": 98.6,\n\"SP\" : 120,\n\"DP\" : 80\n}\n\n",
											"type": "text"
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "6e1fb830-0569-4934-84e7-2d955d5fa6bb",
									"name": "2.Add New Reports with/without Vitals for existing Patient Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text"
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:50 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Bennet\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae748ab8896d2890f49796\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae748ab8896d2890f49796\": \"Prediabetic \\n\",\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "4.Add New Reports without Vitals for existing Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a53af930-bb1f-441a-ba7d-5357a1f0ae32",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ff0dde16-8024-4f5e-b5fe-320e75a7f387",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"{{firstNamePatient}}\",\n\"LastName\": \"{{lastNamePatient}}\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOB1}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : {{WeightPatient}},\n       “Height” : {{HeightPatient}},\n        “Temperature” : {{TempPatient}},\n        “SP” : {{SPpatient}},\n        “DP” : {{DPpatient}}\n}\n\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "6eabb062-3244-41ba-adbb-d4b3ec1cd936",
									"name": "4.Add New Reports without Vitals for existing Patient",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722830062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0XOMZn0ROZyJYjkmKYull4LxaZDpJezvnOfCkFAzruk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722830062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0XOMZn0ROZyJYjkmKYull4LxaZDpJezvnOfCkFAzruk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 05 Aug 2024 03:54:22 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 947,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Corbett\",\n    \"ContactNumber\": \"6256663235\",\n    \"Email\": \"Janessa.Hartmann@yahoo.com\",\n    \"Allergy\": \"SOY\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"goan\",\n    \"FileMorbidity\": {\n        \"66b04c86a2b35b78f82f7cc9\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66b04ceea2b35b78f82f7ccb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66b04c30a2b35b78f82f7cc5\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66b04c86a2b35b78f82f7cc9\": \"Prediabetic \\n\",\n        \"66b04ceea2b35b78f82f7ccb\": \"Prediabetic \\n\",\n        \"66b04c30a2b35b78f82f7cc5\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1992-01-01\",\n    \"DieticianId\": 1547,\n    \"Vitals\": {\n        \"66b04c30a2b35b78f82f7cc5\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-05T03:51:12.713+00:00\"\n}"
								}
							]
						},
						{
							"name": "All Patients",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a309cc28-65ac-4b3b-99ff-4a9b7cb0cbc3",
										"exec": [
											"",
											"",
											"//Skip delete for now",
											"",
											"pm.execution.setNextRequest(\"1.\tCreate New Patient that already exists 400\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1879fee3-9df1-4461-abbc-5ceb1719208b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "Delete Patient by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2219208f-9bd6-4270-9335-16a7b9c09e6b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Resume the postrequisites\r",
											"\r",
											"pm.execution.setNextRequest(\"Delete Patient\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fa9bc995-5a82-431d-b8c7-e8053bb21c94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						}
					],
					"id": "e41479c2-5ce1-4a2a-8fe0-88cacb43dacd"
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "1.\tCreate New Patient that already exists 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"//response time is less than 500 ms",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"// error message ",
											"pm.test(\"Error message shows duplicate patient\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"DUPLICATE_ENTITY\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient already exists with given DateOfBirth and ContactNumber\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e54fabfb-7bd2-4478-9b65-e928b4974bd0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"{{firstNamePat1}}\",\n\"LastName\": \"{{lastNamePat1}}\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOB1}}\"\n}",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "1.\tCreate New Patient with invalid FirstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"//response time is less than 500 ms",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"// error message ",
											"pm.test(\"Error message shows duplicate patient\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows FirstName should only contain Alphabets\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"FirstName should only contain Alphabets\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cf1404e6-6025-4c87-8d98-477f9d927633",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"123\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOBkb}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "1.\tCreate New Patient with invalid LastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"//response time is less than 500 ms",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"// error message ",
											"pm.test(\"Error message shows duplicate patient\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows FirstName should only contain Alphabets\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"LastName should only contain Alphabets\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4b0dd88f-7880-4224-9eb5-0d083897fd69",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Charlie\",\n\"LastName\": \"123\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOBkb}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "1.\tCreate New Patient with invalid Contact number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"//response time is less than 500 ms",
											"pm.test(\"Response time is less than `1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"",
											"// error message ",
											"pm.test(\"Error message shows duplicate patient\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Contact number should contain 10 digits\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Contact number should contain 10 digits\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fa6df43e-e76f-4b16-aa2a-f2f87dc3122d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Charlie\",\n\"LastName\": \"Brown\",\n\"ContactNumber\": \"HAPPY12345678\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOBkb}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "2.\tCreate New Patient incorrect selection food preference",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows food preferennce is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Food Preference\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ab1ff6ba-68af-4e5c-b00f-f5a229e4f076",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"Eggitarian\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "3.\tCreate New Patient incorrect selection Allergy 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Response time",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Allergy selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Allergy Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "751fb26e-0609-4048-8740-a7f1199fdbbe",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"TREE NUT\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "4.\tCreate New Patient incorrect selection Cuisine Category 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"//response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Cuisine Category selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Cuisine Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ea7815f5-64a8-4384-9b97-d91aab67d385",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"Japanese\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "5.\tCreate New Patient Mandatory Field FirstName missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"firstName : User First Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e6e5bded-0e80-4f1e-812b-04c01c3562ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "6.\tCreate New Patient Mandatory Field LastName missing 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c5d322cc-05a1-4667-b999-aa2754ee49c2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "8. [BUG]Create New Patient Mandatory Field Contact Number missing 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7f191d78-ffac-46c8-820b-95fff9d8c23e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1971-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": [
								{
									"id": "f2ddace5-fcb1-434b-9711-ba76adcb04db",
									"name": "6.\tCreate New Patient Patient that already exists Mandatory Field LastName 404 Copy",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
												}
											]
										},
										"url": "{{BaseURL}}/patient"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 04 Aug 2024 02:42:04 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 674,\n    \"FirstName\": \"Connie\",\n    \"LastName\": \"Mitchell\",\n    \"Email\": \"Clemens22@hotmail.com\",\n    \"Allergy\": \"SESAME\",\n    \"FoodPreference\": \"JAIN\",\n    \"CuisineCategory\": \"mizo\",\n    \"FileMorbidity\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aeea7cb8896d2890f49868\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 960,\n    \"Vitals\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-04T02:42:04.194+00:00\"\n}"
								}
							]
						},
						{
							"name": "9.\tCreate New Patient Mandatory Field DOB missing 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"",
											"",
											"try{ let response = pm.response.json();",
											"   pm.environment.set(\"patientIdKB1\", response.patientId);",
											"   pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB1\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"Response is text\", () => {let response = pm.response.text()}); ",
											"}",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Error message shows 'Date Should be in format yyyy-MM-dd'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Date Should be in format yyyy-MM-dd\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
											"})",
											"// //Data type validation",
											"// pm.test('All Data types are correct', () => {",
											"//     pm.expect(response.errorCode).to.be.a('string');",
											"//     pm.expect(response.errorMessage).to.be.a('string');",
											"// })",
											"",
											"//check if all items are present",
											"",
											"",
											"// var schema = {",
											"//     properties: {",
											"//     errorCode: {",
											"//       type: \"string\",",
											"//     },",
											"//     errorMessage: {",
											"//       type: \"string\",",
											"//     },",
											"//   },",
											"//   required: [",
											"//     \"errorCode\",",
											"//     \"errorMessage\"",
											"//   ],",
											"// };",
											"",
											"// pm.test(\"Schema is valid\", () => {",
											"//   pm.response.to.have.jsonSchema(schema);",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d82212b0-5d2c-42be-b282-8aa579cf0155",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef538fb-527f-4c20-ac44-8c5c1d22a3be"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "10.\tCreate New Patient Mandatory Field Allergies missing 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status code name is Internal Server Error\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows Internal Server Error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");",
											"});",
											"",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"",
											"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.timestamp).to.match(dateFormat);",
											"    pm.expect(response.status).to.be.a('number');",
											"    pm.expect(response.error).to.be.a('string');",
											"    pm.expect(response.path).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    timestamp: {",
											"      type: \"string\",",
											"    },",
											"    status: {",
											"      type: \"number\",",
											"    },",
											"    error: {",
											"      type: \"string\",",
											"    },",
											"    path: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"timestamp\",",
											"    \"status\",",
											"    \"error\",",
											"    \"path\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f036f963-c4e9-4fb0-96f5-8e51382579c1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1982-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "11.\tCreate New Patient Mandatory Field Cuisine missing 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status code name is Internal Server Error\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows Internal Server Error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");",
											"});",
											"",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"",
											"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.timestamp).to.match(dateFormat);",
											"    pm.expect(response.status).to.be.a('number');",
											"    pm.expect(response.error).to.be.a('string');",
											"    pm.expect(response.path).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    timestamp: {",
											"      type: \"string\",",
											"    },",
											"    status: {",
											"      type: \"number\",",
											"    },",
											"    error: {",
											"      type: \"string\",",
											"    },",
											"    path: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"timestamp\",",
											"    \"status\",",
											"    \"error\",",
											"    \"path\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3e9a3541-0723-4431-8e53-df8655154b6c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\":\"{{allergyKB}}\",\n\"FoodPreference\":\"{{foodpref}}\",\n\"DateOfBirth\": \"1982-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "[BUG]Create New Patient Eggetarian selection food preference & Egg allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"",
											"",
											"});",
											"",
											"//Set environment variable Patient ID  ",
											"",
											"    try{",
											"   pm.expect(response).to.have.own.property(\"patientId\");",
											"   pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"    pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"FAIL - User ID was not created as it already exists or some other error\", () => {throw new Error(e.message)}); ",
											"}",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e43f9a74-dedd-4491-a159-2bc7ee02c297",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"EGG\",\n\"FoodPreference\": \"EGGETARIAN\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "1. Update Patient invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c1de1fb-7093-40ce-928c-dcbe63770e62",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"//response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Error message shows patient not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows patient not found with Id 99\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient not found with patientId : 99\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "13b89dd3-a183-4dd4-b33f-12ce04f31c89",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
											"disabled": true
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/99"
							},
							"response": []
						},
						{
							"name": "2. Update Patient incorrect allergy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c1de1fb-7093-40ce-928c-dcbe63770e62",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows food preferennce is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Allergy Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8910a8ad-0978-4d12-b5e2-6c188854b60f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"TREE NUT\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
											"disabled": true
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "3.\tUpdate Patient incorrect selection Allergy 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Response time",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Allergy selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Allergy Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a3eb94f7-0ff3-44a4-b1e8-e89346d686df",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"TREE NUT\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "4.\tUpdate Patient incorrect selection Cuisine Category 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"//response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Cuisine Category selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Cuisine Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bd93afa5-9683-4edb-9268-dbe5e349c4f1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"Japanese\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "5.\tUpdate Patient Mandatory Field FirstName missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"firstName : User First Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "83192b16-c48b-4af9-812d-c6ba69ecf450",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "6.\tUpdate Patient Mandatory Field LastName missing 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "655f468f-e6f3-42c0-bd5c-0cc81774ad11",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "8. [BUG] Update Patient Mandatory Field Contact Number missing 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e9f46599-6cd5-448f-aec1-7935b35a9f2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-04\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "1debd816-8f6f-4ad6-b2f7-eb2856099f83",
									"name": "6.\tCreate New Patient Patient that already exists Mandatory Field LastName 404 Copy",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
												}
											]
										},
										"url": "{{BaseURL}}/patient"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 04 Aug 2024 02:42:04 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 674,\n    \"FirstName\": \"Connie\",\n    \"LastName\": \"Mitchell\",\n    \"Email\": \"Clemens22@hotmail.com\",\n    \"Allergy\": \"SESAME\",\n    \"FoodPreference\": \"JAIN\",\n    \"CuisineCategory\": \"mizo\",\n    \"FileMorbidity\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aeea7cb8896d2890f49868\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 960,\n    \"Vitals\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-04T02:42:04.194+00:00\"\n}"
								}
							]
						},
						{
							"name": "9.\tUpdate Patient Mandatory Field DOB missing 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"",
											"",
											"try{ let response = pm.response.json();",
											"   pm.environment.set(\"patientIdKB1\", response.patientId);",
											"   pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB1\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"Response is text\", () => {let response = pm.response.text()}); ",
											"}",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Error message shows 'Date Should be in format yyyy-MM-dd'\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Date Should be in format yyyy-MM-dd\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('text/plain;charset=UTF-8');",
											"})",
											"// //Data type validation",
											"// pm.test('All Data types are correct', () => {",
											"//     pm.expect(response.errorCode).to.be.a('string');",
											"//     pm.expect(response.errorMessage).to.be.a('string');",
											"// })",
											"",
											"//check if all items are present",
											"",
											"",
											"// var schema = {",
											"//     properties: {",
											"//     errorCode: {",
											"//       type: \"string\",",
											"//     },",
											"//     errorMessage: {",
											"//       type: \"string\",",
											"//     },",
											"//   },",
											"//   required: [",
											"//     \"errorCode\",",
											"//     \"errorMessage\"",
											"//   ],",
											"// };",
											"",
											"// pm.test(\"Schema is valid\", () => {",
											"//   pm.response.to.have.jsonSchema(schema);",
											"// });",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ffb3b746-a329-443c-9eb3-38fbfbdd0123",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef538fb-527f-4c20-ac44-8c5c1d22a3be"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "10.\tUpdate Patient Mandatory Field Allergies missing 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status code name is Internal Server Error\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows Internal Server Error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");",
											"});",
											"",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"",
											"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.timestamp).to.match(dateFormat);",
											"    pm.expect(response.status).to.be.a('number');",
											"    pm.expect(response.error).to.be.a('string');",
											"    pm.expect(response.path).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    timestamp: {",
											"      type: \"string\",",
											"    },",
											"    status: {",
											"      type: \"number\",",
											"    },",
											"    error: {",
											"      type: \"string\",",
											"    },",
											"    path: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"timestamp\",",
											"    \"status\",",
											"    \"error\",",
											"    \"path\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fb7ec7f3-112b-4e52-b2af-22690589a564",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1982-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "11.\tUpdate Patient Mandatory Field Cuisine missing 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Status code name is Internal Server Error\", function () {",
											"    pm.response.to.have.status(\"Internal Server Error\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows Internal Server Error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");",
											"});",
											"",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"",
											"let dateFormat = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.timestamp).to.match(dateFormat);",
											"    pm.expect(response.status).to.be.a('number');",
											"    pm.expect(response.error).to.be.a('string');",
											"    pm.expect(response.path).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    timestamp: {",
											"      type: \"string\",",
											"    },",
											"    status: {",
											"      type: \"number\",",
											"    },",
											"    error: {",
											"      type: \"string\",",
											"    },",
											"    path: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"timestamp\",",
											"    \"status\",",
											"    \"error\",",
											"    \"path\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1fb0f015-6c3d-4c32-85f5-1c4ca9fc7994",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{\"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\":\"{{allergyKB}}\",\n\"FoodPreference\":\"{{foodpref}}\",\n\"DateOfBirth\": \"1982-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "[BUG]Create New Patient Eggetarian selection food preference & Egg allergy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"//Set environment variable Patient ID  ",
											"",
											"    try{",
											"   pm.expect(response).to.have.own.property(\"patientId\");",
											"   pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"    pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"FAIL - User ID was not created as it already exists or some other error\", () => {throw new Error(e.message)}); ",
											"}",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b484b170-8ec3-408d-a089-3296e20ff3bc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"EGG\",\n\"FoodPreference\": \"EGGETARIAN\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-04\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "1.Add New Reports with Vitals for existing Patient 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7deb8ac9-9e36-42a4-800d-c085e0db8a7b",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Error message shows patient not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows patient not found with Id 99\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient not found with patientId : 99\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9cab74a0-8e46-4e3d-bd1a-d87250454e90",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\"Weight\" : 168.1,\n\"Height\": 5.4,\n\"Temperature\": 98.6,\n\"SP\" : 120,\n\"DP\" : 80\n}\n",
											"type": "text"
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/99"
							},
							"response": []
						},
						{
							"name": "1.Add New Reports without Vitals for invalid Patient 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7deb8ac9-9e36-42a4-800d-c085e0db8a7b",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Error message shows patient not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows patient not found with Id 99\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient not found with patientId : 99\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "028ba80d-5cb0-44fc-919c-764e85f4b6f2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\"Weight\" : 168.1,\n\"Height\": 5.4,\n\"Temperature\": 98.6,\n\"SP\" : 120,\n\"DP\" : 80\n}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/99"
							},
							"response": []
						},
						{
							"name": "[BUG]2. Update Patient DOB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cf64f7f-9089-4ddf-811a-8262793e9fa1",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9dee0654-ac21-4d47-9059-e1e3776290ce",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1999-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "[BUG]2. Update Patient Contact number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cf64f7f-9089-4ddf-811a-8262793e9fa1",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b5a8791d-b0fa-4534-bb41-08cd65fe7f1c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"9999999999\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"{{DOBkb}}\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "eeed11cd-ce9b-47e8-affc-4f938db7d28d",
									"name": "3.\tUpdate Patient by UserId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
													"disabled": true
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:25 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Corbett\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1992-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "Get Patient Reports invalid API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe22b2a8-c009-45e6-99e4-e693bb6f2978",
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Successful POST request\r",
											"\r",
											"pm.test(\"get request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"// Status code name \r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Test response times\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"//Header validation\r",
											"\r",
											"pm.test(\"Content-Type Header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"//Header Type Validation\r",
											"pm.test(\"Content-Type Header is application-json\", () => {\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "86d037d4-7072-459c-907d-dd1cef0c4a34",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{PatientToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patientP:>/testReports/1231"
							},
							"response": []
						},
						{
							"name": "Get All Patients Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe22b2a8-c009-45e6-99e4-e693bb6f2978",
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Status code name \r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Test response times\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"//Header validation\r",
											"\r",
											"pm.test(\"Content-Type Header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"//Header Type Validation\r",
											"pm.test(\"Content-Type Header is application-json\", () => {\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d7fc5c7f-5dd8-48a1-8749-37bbcf54366d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{PatientToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patient/testReports/{{patientIdKB1}}"
							},
							"response": []
						},
						{
							"name": "Patient by invalid FileID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e918a7e5-b790-4165-9b0b-5cd061d884bd",
										"exec": [
											"pm.test(\"status code is 404: Bad Request\",()=>{\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											"pm.test(\"Check Status Text\",()=>{\r",
											"pm.response.to.have.status('Not Found')\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type Header is present\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type Header is application/json\",()=>{\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json')\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "152fc0e8-40d6-44e8-bc05-dd0bd10b4dd8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{PatientToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patient/testReports/viewFile/{{1fileidKB}}"
							},
							"response": []
						},
						{
							"name": "Delete Patient by ID Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "339716de-9264-4686-9dff-fae68d745d6c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "bdf0f152-b42c-4faa-9264-c47327600ca0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/patient/2189"
							},
							"response": []
						}
					],
					"id": "0edebe16-b7be-423c-ae6b-6c6a8172f1e4"
				},
				{
					"name": "Patient Get Endpoints",
					"item": [
						{
							"name": "Patient by FileID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f79518d3-7f45-4d8c-beff-a55985f3a11f",
										"exec": [
											"pm.test(\"status code is 200: Created\",()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check Status Text\",()=>{\r",
											"    pm.response.to.have.status('OK');\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type Header is present\",()=>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"//Validating JSON Schema test\r",
											"\r",
											"var schema = {\r",
											"    properties: {\r",
											"    patientId: {\r",
											"      type: \"number\",\r",
											"    },\r",
											"    FirstName: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    LastName: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    Email: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    Allergy: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    FoodPreference: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    CuisineCategory: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    FileMorbidity: {\r",
											"      type: \"object\",\r",
											"    },\r",
											"    FileMorbidityCondition: {\r",
											"      type: \"object\",\r",
											"    },\r",
											"    DateOfBirth: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"    DieticianId: {\r",
											"      type: \"number\",\r",
											"    },\r",
											"    Vitals: {\r",
											"      type: \"object\",\r",
											"    },\r",
											"    LastVisitDate: {\r",
											"      type: \"string\",\r",
											"    },\r",
											"  },\r",
											"  required: [\r",
											"    \"patientId\",\r",
											"    \"FirstName\",\r",
											"    \"LastName\",\r",
											"    \"ContactNumber\",\r",
											"    \"Email\"\r",
											"  ],\r",
											"};\r",
											"\r",
											"pm.test(\"Schema is valid\", () => {\r",
											"  pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f1a0418b-8373-4f31-b0af-2c975a352a94",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{PatientToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patient/testReports/viewFile/{{fileidKB}}"
							},
							"response": []
						},
						{
							"name": "Get Patient Reports",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d43f454a-6a56-4352-86cf-fc2e4dc9e707",
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"// Successful POST request\r",
											"\r",
											"pm.test(\"get request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"// Status code name \r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Test response times\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"//Header validation\r",
											"\r",
											"pm.test(\"Content-Type Header is present\", () => {\r",
											"  pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"\r",
											"//Header Type Validation\r",
											"pm.test(\"Content-Type Header is application-json\", () => {\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"});\r",
											"\r",
											"//Do the positive Delete scenario \r",
											"\r",
											"pm.execution.setNextRequest(\"Delete Patient by ID\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "643583e3-bcea-4ee6-baea-a570c3786cae",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{PatientToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/patient/testReports/{{PatientId2}}"
							},
							"response": []
						}
					],
					"id": "a5cdb933-556d-4a7d-8a72-0c12259ab7a0"
				},
				{
					"name": "PostRequisites",
					"item": [
						{
							"name": "Delete Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b074df98-5d65-4172-ac51-ea3b227e3aeb",
										"exec": [
											"pm.execution.setNextRequest(\"Logout Dietitian User\");\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "128d3810-d083-4663-899e-19c9bc2bd498",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/patient/{{PatientId2}}"
							},
							"response": []
						},
						{
							"name": "Logout Dietitian User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dbddb3a-e06a-4181-9a18-534b7da2b78d",
										"exec": [
											"pm.execution.setNextRequest(\"DELETE DIETITIAN\");\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "807edd42-c2e7-45c7-b2ab-ee50471ff692",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/logoutdietician"
							},
							"response": []
						},
						{
							"name": "DELETE DIETITIAN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ac7b29-7b39-44e0-854c-8d3f9418a079",
										"exec": [
											"pm.execution.setNextRequest(\"Logout Admin User\");\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "9e283586-5c16-4c52-b9e3-1ff2dc753b7c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/dietician/{{DieticianId2}}"
							},
							"response": []
						},
						{
							"name": "Logout Admin User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf8f1d41-1d3f-4405-8bf8-c866d5d0ba46",
										"exec": [
											"pm.execution.setNextRequest(null);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "460dcde4-47b3-4b89-83c6-da435a7e83c4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/logoutdietician"
							},
							"response": []
						}
					],
					"id": "313ac936-d51a-4357-afff-c0b44fc0899a"
				}
			],
			"id": "4a36b366-0738-4df9-bf6b-5dc640f1681d"
		}
	],
	"variable": [
		{
			"key": "MorbidityTestName_Fasting_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Average_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Plasma_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_HBA1C",
			"value": ""
		},
		{
			"key": "thyroid_TSH ",
			"value": ""
		},
		{
			"key": "thyroid_T3",
			"value": ""
		},
		{
			"key": "thyroid_T4 ",
			"value": ""
		},
		{
			"key": "thyroid_TSH",
			"value": ""
		},
		{
			"key": "thyroid_T4",
			"value": ""
		},
		{
			"key": "Bearertk",
			"value": ""
		}
	]
}