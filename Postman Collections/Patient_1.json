{
	"info": {
		"_postman_id": "401e7bf0-2abc-41b6-95df-a455883b5303",
		"name": "Team-10 Avid APIers",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "User Login",
					"id": "a1e3d24b-5917-4ab9-9900-7b27cdb69460",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team10@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create Dietician",
					"id": "158c432c-4e56-4b08-a658-b3ef3fe0c10a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9045783531\",\r\n  \"DateOfBirth\": \"2023-07-26T18:14:08.570Z\",\r\n  \"Education\": \"MBBS\",\r\n  \"Email\": \"Aa@gmail.com\",\r\n  \"Firstname\": \"John\",\r\n  \"HospitalCity\": \"Carmel\",\r\n  \"HospitalName\": \"Ascension\",\r\n  \"HospitalPincode\": \"123456\",\r\n  \"HospitalStreet\": \"warren\",\r\n  \"Lastname\": \"Adam\"\r\n \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/dietician"
					},
					"response": []
				},
				{
					"name": "Dietician Login",
					"id": "19f2156c-3757-434d-a8d9-7ac519fe3d01",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Laugh44\",\r\n  \"userLoginEmail\": \"Aa@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/login",
					"id": "2bc8440d-aa3c-4bc6-a772-714478b56a33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team10@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/dietician/",
					"id": "7401bdc2-9c6f-4d16-b1ba-a7e4845ae2f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerTokenNeethu}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/dietician/"
					},
					"response": []
				},
				{
					"name": "{{BaseURL}}/dietician/dietician",
					"id": "b6482ec6-53ed-4f34-bf52-fe1e2a7d9de4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{BearerTokenNeethu}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/dietician/dietician"
					},
					"response": []
				}
			],
			"id": "df261ba2-65ed-429c-86c1-39fee62b9f39",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d5d4647-187b-4fd9-b99c-a04b156d9068",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8789d544-00e8-4c13-a1ce-4e4b5238d2cd",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Morbidity Positive Testing",
			"item": [
				{
					"name": "Admin User Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"Bearertk\", token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3c52da5-21c9-4beb-a388-fa34676d4865",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//   \"password\":\"{{pw}}\",\r\n//   \"userLoginEmail\":\"{{UserID}}\"\r\n// }\r\n\r\n{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team10@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "GET operation -200- AS ADMIN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    console.log('pm.response',pm.response.json())\r",
									"\r",
									"    for(i=0;i<responseBody.length;i++){\r",
									"     \r",
									"    if(i===2)\r",
									"    {\r",
									"      \r",
									"          console.log('morbidity name',responseBody[i].morbidityTestName) \r",
									"\r",
									" pm.globals.set(\"morbidity_test_name\", responseBody[i].morbidityTestName)\r",
									"}\r",
									"\r",
									"}\r",
									"  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f1d6178c-5f0e-4445-a397-ced24bbff717",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "GET AllMorbidities -200- AS DIETICIAN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "824122c3-d3be-4d68-97ff-99b109d0ef0d",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    console.log('pm.response',pm.response.json())\r",
									"\r",
									"    for(i=0;i<responseBody.length;i++){\r",
									"     //define an array in Javascript. Use Set instead\r",
									"\r",
									"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
									"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
									"    {\r",
									"         pm.environment.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
									"      \r",
									"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"}\r",
									" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
									"{\r",
									"  pm.environment.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
									"{\r",
									"  pm.environment.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='HbA1c')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='TSH')\r",
									"{\r",
									"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.environment.set('thyroid_TSH',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='T3')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.environment.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='T4')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
									" \r",
									"}\r",
									"\r",
									"\r",
									"}})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7dd367e1-d664-4dc7-9e57-82f034f8ce39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "Retrieve DiabetesTest HBA1C",
					"id": "84cf1358-6264-4142-891f-215c8e7dc9f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_HBA1C}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test Average Glucose",
					"id": "e57de8fc-c2e1-437c-b239-c2edb189df14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Average_G}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test Fasting Glucose",
					"id": "49d926f4-fa9b-4824-8755-1f51e56bbf0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Fasting_G}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test  Plasma Glucose",
					"id": "25d86b33-145d-49fb-aded-344ca1c05a2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Plasma_G}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid Test T4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69dbb6c8-4a6b-4ed6-bfdf-67d896dcd0e9",
								"exec": [
									"const thyroidT4=pm.environment.get('thyroid_T4');\r",
									"if(thyroidT4==undefined)\r",
									"{\r",
									"\r",
									"pm.environment.set('thyroid_T4',T4)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "65c887d5-5f04-42d2-94bc-4e2a982eefd8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{thyroid_T4}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid Test T3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "950286ed-c4e7-4d15-8c3a-10d84ce81c0b",
								"exec": [
									"const thyroidT3=pm.environment.get('thyroid_T3');\r",
									"if(thyroidT3==undefined)\r",
									"{\r",
									"\r",
									"pm.environment.set('thyroid_T3',T3)\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "059a7369-f2e4-4d30-8701-f5bf813b154d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{thyroid_T3}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid Test TSH",
					"id": "c58f1649-5f1e-4ede-9af1-46bbade4b2e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{thyroid_TSH}}"
					},
					"response": []
				},
				{
					"name": "Admin Logout",
					"id": "8938238a-b1dc-4c84-b009-689f1067878e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/logoutdietician"
					},
					"response": []
				},
				{
					"name": "GET using Dietician Token",
					"id": "2b7c0042-ba46-42c5-9798-90db27a823a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJBYUBnbWFpbC5jb20iLCJpYXQiOjE3MjI1NzI2NzgsImV4cCI6MTcyMjYwMTQ3OH0.RYuGLmOJMeDJ0fvhZdyLEkD0Xvxn8ojW1ick9sxe5-xvaTzdSeBoP-EWXeNxHnpwwEvKIo9nQiLuQyRIcHWEFg"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				}
			],
			"id": "842fc292-53e2-4523-819c-276c0d50d7b4"
		},
		{
			"name": "MorbityTesting NegativeScenarios",
			"item": [
				{
					"name": "Admin User Login Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"Bearertk\", token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "65eab61f-bb33-4e8e-8b65-93058c3a1f4a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//   \"password\":\"{{pw}}\",\r\n//   \"userLoginEmail\":\"{{UserID}}\"\r\n// }\r\n\r\n{\r\n  \"password\": \"test\",\r\n  \"userLoginEmail\": \"Team10@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "GET operation -200- AS ADMIN Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"id": "98bc9adf-e6c3-4aff-8233-2a4c0f00fa55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "GET AllMorbidities withinvalid endpoint- AS DIETICIAN Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbcdfa96-f59f-4a00-9429-9a2b77463a49",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    console.log('pm.response',pm.response.json())\r",
									"\r",
									"    for(i=0;i<responseBody.length;i++){\r",
									"     //define an array in Javascript. Use Set instead\r",
									"\r",
									"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
									"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
									"    {\r",
									"         pm.collectionVariables.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
									"      \r",
									"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"}\r",
									" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
									"{\r",
									"  pm.collectionVariables.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
									"{\r",
									"  pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='HbA1c')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.collectionVariables.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='TSH')\r",
									"{\r",
									"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.collectionVariables.set('thyroid_TSH ',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='T3')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.collectionVariables.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									" if (responseBody[i].morbidityTestName==='T4')\r",
									"{\r",
									"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
									"  pm.collectionVariables.set('thyroid_T4 ',responseBody[i].morbidityTestName);\r",
									" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
									"}\r",
									"\r",
									"\r",
									"}})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "389e073a-6b90-4760-b7b8-f20f4412b9d3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "Retrieve Morbidity with wrong testname",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d2ac6e9-e4b3-442d-87d0-3fc54d7dc0bb",
								"exec": [
									"//First do pm.collectionVariables.get('arrayname')\r",
									"const testNameMap =pm.collectionVariables.get('MorbidityTestNames');\r",
									"//const data=pm.collectionVariables.get('MorbidityTestNames');\r",
									"\r",
									"console.log(testNameMap);\r",
									"\r",
									"function getTestNameById(MorbidityId) {\r",
									"\r",
									"    for(i=0;i<testNameMap.length;i++)\r",
									"    {\r",
									"        const morbidity_id=testNameMap[i].morbidityId;\r",
									"        console.log('morbidity_id---',morbidity_id);\r",
									"        if(morbidity_id==='DIA_FG')\r",
									"        {\r",
									"            console.log('testNameMap[i].morbidityTestName',testNameMap[i].morbidityTestName);\r",
									"    pm.collectionVariables.set('MorbidityTestNames',testNameMap[i].morbidityTestName);\r",
									"        }\r",
									"\r",
									"\r",
									"       // console.log('morbidity name',responseBody[i].morbidityTestName)\r",
									"       // if(testNameMap[i].MorbidityIdmorbidityTestName)\r",
									"    }\r",
									"//    // const item = testNameMap.find(obj => obj.morbidityTestId === MorbidityId);\r",
									"//    console.log('MorbidityId',MorbidityId)\r",
									"// console.log('found morbity test nameeeeeeeeeeeee',item)\r",
									"//     return item ? item.morbidityTestName : null; // Return null if not found\r",
									"}\r",
									"\r",
									"// Example usage\r",
									"// const morbidityTestName = getTestNameById(\"DIA_FG\");\r",
									"// console.log(morbidityTestName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "13757a5b-590a-4643-ad2b-6d509b601940",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/fever"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid  invalid testname",
					"id": "28e480c6-8496-48e3-ad10-e03e9907994b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/TSHh"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid Test T3 with invalidtestname",
					"id": "5b205ae1-9b55-4301-a6b3-85876d1d2022",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/T3333333"
					},
					"response": []
				},
				{
					"name": "Retrieve Thyroid Test T4 with wrong testname",
					"id": "bd623db5-b65f-4d1a-9543-017a9f4b7c4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/T444"
					},
					"response": []
				},
				{
					"name": "Retrieve DiabetesTest HBA1C negativeTesting Copy",
					"id": "4464a4c0-30be-4a57-ab33-4563db34b04c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/{{MorbidityTestName}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test Average Glucose with invalid testname",
					"id": "77fcf65b-f6ad-454c-8eb1-64ea67b21040",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/avg glucos"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test Fasting Glucose with invalid testname",
					"id": "156f9b71-2015-4556-a75e-81f2fc83b33c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/fasting glucose123"
					},
					"response": []
				},
				{
					"name": "Retrieve Diabetes Test  Plasma Glucose with inavalid Test_name",
					"id": "809b8f56-2606-4685-96e7-fb41cefb43dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Bearertk}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity/plasma glucoseeee"
					},
					"response": []
				},
				{
					"name": "GET using Dietician Token Copy",
					"id": "1918ee4f-eb6b-41ec-8a75-d0ad747f1f6b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJBYUBnbWFpbC5jb20iLCJpYXQiOjE3MjI1NzI2NzgsImV4cCI6MTcyMjYwMTQ3OH0.RYuGLmOJMeDJ0fvhZdyLEkD0Xvxn8ojW1ick9sxe5-xvaTzdSeBoP-EWXeNxHnpwwEvKIo9nQiLuQyRIcHWEFg"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/morbidity"
					},
					"response": []
				}
			],
			"id": "9ad3e2f1-0eb0-438c-8be6-959437a4950a"
		},
		{
			"name": "Patient - PUT & POST",
			"item": [
				{
					"name": "Temporary",
					"item": [
						{
							"name": "GET DIETITIAN 861 864",
							"id": "2f3dd6c2-563b-4276-beb7-133361bedb2d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/dietician/861"
							},
							"response": []
						},
						{
							"name": "GET DIETITIAN 861 864 Copy",
							"id": "1a2ea5f7-bc59-4ddb-8da7-3b146e9e4c1e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "DELETE DIETITIAN",
							"id": "6f397f2f-79b0-4c63-9708-331901095379",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/dietician/864"
							},
							"response": []
						},
						{
							"name": "DELETE PATIENT",
							"id": "d373f06c-ab38-4428-aeee-64faa69d8d25",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/patient/706"
							},
							"response": []
						}
					],
					"id": "2c84e4ff-ec2c-41f9-8e43-cab7afff15d8"
				},
				{
					"name": "PreRequisites",
					"item": [
						{
							"name": "Admin User Login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const token = responseBody.token;\r",
											"\r",
											"    pm.globals.set(\"AdminToken\", token);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "83bdd35f-c550-4149-9b93-b002500e9bd0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\":\"{{pw}}\",\r\n  \"userLoginEmail\":\"{{UserID}}\"\r\n}\r\n\r\n// {\r\n//   \"password\": \"test\",\r\n//   \"userLoginEmail\": \"Team10@gmail.com\"\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/login"
							},
							"response": []
						},
						{
							"name": "Gather Dietitian Credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "096cb141-cc07-441f-a45a-11bc74a0e33a",
										"exec": [
											"//Generate random contact number\r",
											"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number\r",
											"pm.globals.set(\"phoneNumber\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens\r",
											"\r",
											"//generate random DOB\r",
											"const mydate = new Date(pm.variables.replaceIn(\"{{$randomDatePast}}\")); //Generate a past date\r",
											"pm.globals.set(\"dob\", mydate.toISOString());//format it into ISO timestamp\r",
											"\r",
											"//generate random email address\r",
											"\r",
											"let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email\r",
											"pm.globals.set(\"dietmail\",mail);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dcd3af76-1ec8-403a-bb2e-74cb8589a2dd",
										"exec": [
											"// Import ID & PW for dietitian",
											"",
											"",
											"pm.test(\"Extract value and set global variable\", function () {",
											"    let responseBody = pm.response.json();",
											"    let dietid = responseBody.id;",
											"    let pwdiet = responseBody.loginPassword;",
											"",
											"    pm.globals.set(\"dietid\", dietid);",
											"    pm.globals.set(\"pwdiet\", pwdiet);});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0e33247d-6a43-4d80-85f2-ca88c69c59d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\r\n//   \"ContactNumber\": \"{{phoneNumber}}\",\r\n//   \"DateOfBirth\": \"{{dob}}\",\r\n//   \"Education\": \"string\",\r\n//   \"Email\": \"string\",\r\n//   \"Firstname\": \"string\",\r\n//   \"HospitalCity\": \"string\",\r\n//   \"HospitalName\": \"string\",\r\n//   \"HospitalPincode\": \"string\",\r\n//   \"HospitalStreet\": \"string\",\r\n//   \"Lastname\": \"string\"\r\n \r\n// }\r\n\r\n\t{\r\n  \"ContactNumber\": \"{{phoneNumber}}\",\r\n  \"DateOfBirth\": \"{{dob}}\",\r\n  \"Education\": \"PhD\",\r\n  \"Email\": \"{{dietmail}}\",\r\n  \"Firstname\": \"Donna\",\r\n  \"HospitalCity\": \"Macon\",\r\n  \"HospitalName\": \"Summer Haven\",\r\n  \"HospitalPincode\": \"335001\",\r\n  \"HospitalStreet\": \"24 Boulevard\",\r\n  \"Lastname\": \"Summers\"\r\n \r\n}\r\n\r\n\r\n// \t{\r\n//   \"ContactNumber\": \"1251246353\",\r\n//   \"DateOfBirth\": \"1998-07-26T18:14:08.570Z\",\r\n//   \"Education\": \"PhD\",\r\n//   \"Email\": \"diet@avidapier.com\",\r\n//   \"Firstname\": \"Donna\",\r\n//   \"HospitalCity\": \"Macon\",\r\n//   \"HospitalName\": \"Summer Haven\",\r\n//   \"HospitalPincode\": \"335001\",\r\n//   \"HospitalStreet\": \"string\",\r\n//   \"Lastname\": \"Summers\"\r\n \r\n// }\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Dietitian Login - Generate Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const token = responseBody.token;\r",
											"\r",
											"    pm.globals.set(\"DietTokenKB\", token);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "29447780-c6e0-45d8-9a2b-4f7b03a9a60d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\":\"{{pwdiet}}\",\r\n  \"userLoginEmail\":\"{{dietmail}}\"\r\n}\r\n\r\n// {\r\n//   \"password\":\"Clover21\",\r\n//   \"userLoginEmail\":\"diet@avidapier.com\"\r\n// }\r\n\r\n\r\n//     \"id\": 861,\r\n//     \"loginPassword\": \"Clover21\",\r\n//     \"Firstname\": \"Donna\",\r\n//     \"Lastname\": \"Summers\",\r\n//     \"ContactNumber\": \"9413203887\",\r\n//     \"DateOfBirth\": \"2023-10-16T12:56:08.000+00:00\",\r\n//     \"Email\": \"diet@avidapier.com\",\r\n//     \"HospitalName\": \"Summer Haven\",\r\n//     \"HospitalStreet\": \"string\",\r\n//     \"HospitalCity\": \"Macon\",\r\n//     \"HospitalPincode\": \"335001\",\r\n//     \"Education\": \"PhD\"\r\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/login"
							},
							"response": []
						}
					],
					"id": "79eb9308-cb24-4c8e-9279-7410cedf7b22"
				},
				{
					"name": "Positive Tests",
					"item": [
						{
							"name": "1.\tCreate New Patient positive",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// Load lodash library code",
											"const lodash = require('lodash');",
											"",
											"",
											"//Select Random Allergy",
											"var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// Select Random cuisine",
											"",
											"",
											"var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"//select Random food preference",
											"",
											"var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"//Generate random contact number",
											"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"//generate random email address",
											"",
											"let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"//Set environment variable Patient ID  ",
											"",
											"    try{",
											"   pm.expect(response).to.have.own.property(\"patientId\");",
											"   pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"    pm.test(\"PASS - Patient was created successfully - \" + pm.environment.get(\"patientIdKB\"), () => true); ",
											"}catch(e){",
											"    pm.test(\"FAIL - User ID was not created as it already exists or some other error\", () => {throw new Error(e.message)}); ",
											"}",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6482d75e-6914-4623-b319-1df4f129590d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": [
								{
									"id": "0b7f0997-cbc1-4d85-a378-a33218345e40",
									"name": "2.\tCreate New Patient positive",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
												}
											]
										},
										"url": "{{BaseURL}}/patient"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722708357&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=A66S3wmb7NPdg%2B8TP0YsijHZ8rhk2g7kgzab2jz1%2FHU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722708357&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=A66S3wmb7NPdg%2B8TP0YsijHZ8rhk2g7kgzab2jz1%2FHU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:05:58 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patty\",\n    \"LastName\": \"Bennet\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "2. Update Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cf64f7f-9089-4ddf-811a-8262793e9fa1",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a5967d4c-bfd1-430a-9298-f6784c089a26",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "794609ee-e168-4a8d-866b-00658be03909",
									"name": "3.\tUpdate Patient by UserId",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
													"disabled": true
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709105&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=kjKsIZn18dsPRIYB9PO2UXgriPPW%2FCbkb%2BHka2YJjUE%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:25 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Corbett\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1992-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "[500] 3.Add New Reports with Vitals for existing Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69d07497-d352-4af6-b557-5e7a1848b0ce",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dd5e924d-31d3-47a7-9359-44fcb796371a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\"Weight\" : 168.1,\n\"Height\": 5.4,\n\"Temperature\": 98.6,\n\"SP\" : 120,\n\"DP\" : 80\n}\n",
											"type": "text"
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "96f4d527-0864-4246-a189-85921db591cb",
									"name": "2.Add New Reports with/without Vitals for existing Patient Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text"
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:50 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Bennet\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae748ab8896d2890f49796\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae748ab8896d2890f49796\": \"Prediabetic \\n\",\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						},
						{
							"name": "4.Add New Reports without Vitals for existing Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a53af930-bb1f-441a-ba7d-5357a1f0ae32",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"// Successful POST request",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);",
											"});",
											"",
											"// Status code name ",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Test response times",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"",
											"",
											"});",
											"",
											"",
											"//Header validation",
											"",
											"pm.test(\"Content-Type Header is present\", () => {",
											"  pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//Header Type Validation",
											"pm.test(\"Content-Type Header is application-json\", () => {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");",
											"});",
											"",
											"",
											"// Data type & Drop down selection validation",
											"",
											"pm.test(\"All Data types and drop down selections are correct\",()=>{",
											"",
											"    pm.expect(response.patientId).to.be.a(\"number\");",
											"    pm.expect(response.FirstName).to.be.a(\"string\");",
											"    pm.expect(response.LastName).to.be.a(\"string\");",
											"    pm.expect(response.ContactNumber).to.be.a(\"string\");",
											"    pm.expect(response.Email).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.a(\"string\");",
											"    pm.expect(response.Allergy).to.be.oneOf([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"    pm.expect(response.FoodPreference).to.be.a(\"string\");",
											"    pm.expect(response.FoodPreference).to.be.oneOf([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"    pm.expect(response.CuisineCategory).to.be.a(\"string\");",
											"    pm.expect(response.CuisineCategory).to.be.oneOf([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"    pm.expect(response.FileMorbidity).to.be.an(\"object\");",
											"    pm.expect(response.FileMorbidityCondition).to.be.an(\"object\");",
											"    pm.expect(response.DateOfBirth).to.be.a(\"string\");",
											"    pm.expect(response.DieticianId).to.be.a(\"number\");",
											"    pm.expect(response.Vitals).to.be.an(\"object\");",
											"    pm.expect(response.LastVisitDate).to.be.a(\"string\");",
											"});",
											"",
											"",
											"",
											"",
											"//Validating JSON Schema test",
											"",
											"var schema = {",
											"    properties: {",
											"    patientId: {",
											"      type: \"number\",",
											"    },",
											"    FirstName: {",
											"      type: \"string\",",
											"    },",
											"    LastName: {",
											"      type: \"string\",",
											"    },",
											"    Email: {",
											"      type: \"string\",",
											"    },",
											"    Allergy: {",
											"      type: \"string\",",
											"    },",
											"    FoodPreference: {",
											"      type: \"string\",",
											"    },",
											"    CuisineCategory: {",
											"      type: \"string\",",
											"    },",
											"    FileMorbidity: {",
											"      type: \"object\",",
											"    },",
											"    FileMorbidityCondition: {",
											"      type: \"object\",",
											"    },",
											"    DateOfBirth: {",
											"      type: \"string\",",
											"    },",
											"    DieticianId: {",
											"      type: \"number\",",
											"    },",
											"    Vitals: {",
											"      type: \"object\",",
											"    },",
											"    LastVisitDate: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"patientId\",",
											"    \"FirstName\",",
											"    \"LastName\",",
											"    \"ContactNumber\",",
											"    \"Email\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d5b3348b-7764-4ac5-be2d-b5ebb303b793",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
							},
							"response": [
								{
									"id": "bd41c4ce-fb07-49f7-a61d-6f484a613852",
									"name": "4.Add New Reports without Vitals for existing Patient",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": "{{BaseURL}}/patient/newReports/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722830062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0XOMZn0ROZyJYjkmKYull4LxaZDpJezvnOfCkFAzruk%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722830062&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=0XOMZn0ROZyJYjkmKYull4LxaZDpJezvnOfCkFAzruk%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Mon, 05 Aug 2024 03:54:22 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 947,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Corbett\",\n    \"ContactNumber\": \"6256663235\",\n    \"Email\": \"Janessa.Hartmann@yahoo.com\",\n    \"Allergy\": \"SOY\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"goan\",\n    \"FileMorbidity\": {\n        \"66b04c86a2b35b78f82f7cc9\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66b04ceea2b35b78f82f7ccb\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66b04c30a2b35b78f82f7cc5\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66b04c86a2b35b78f82f7cc9\": \"Prediabetic \\n\",\n        \"66b04ceea2b35b78f82f7ccb\": \"Prediabetic \\n\",\n        \"66b04c30a2b35b78f82f7cc5\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1992-01-01\",\n    \"DieticianId\": 1547,\n    \"Vitals\": {\n        \"66b04c30a2b35b78f82f7cc5\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-05T03:51:12.713+00:00\"\n}"
								}
							]
						}
					],
					"id": "a95ec6d1-9ea0-4776-b80c-371ba7c1c072"
				},
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "1.\tCreate New Patient Patient that already exists 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"//response time is less than 500 ms",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"// error message ",
											"pm.test(\"Error message shows duplicate patient\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"DUPLICATE_ENTITY\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient already exists with given DateOfBirth and ContactNumber\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "766ac054-adea-471b-ae71-f1f864a0851c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "2.\tCreate New Patient incorrect selection food preference",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows food preferennce is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Food Preference\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a4b4a50c-618a-425b-9025-106642dbf8fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"Eggitarian\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "3.\tCreate New Patient incorrect selection Allergy 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"",
											"//Response time",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Allergy selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Allergy Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dcb32698-0dab-4ca1-9773-c04247bbc492",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"TREE NUT\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "4.\tCreate New Patient incorrect selection Cuisine Category 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"//response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows Cuisine Category selection is wrong\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Cuisine Category\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "270ec1b6-8a45-4879-80b9-0a176028db6b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patty\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"Japanese\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "5.\tCreate New Patient Patient that already exists Mandatory Field FirstName missing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"firstName : User First Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a1444f38-f9e3-423e-9662-691bcc400784",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "6.\tCreate New Patient Patient that already exists Mandatory Field LastName 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5c6f9ee1-d7b6-413f-89c4-b1bb30047146",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": []
						},
						{
							"name": "7. [FAILED]Create New Patient Patient that already exists Mandatory Field Contact Number 404 Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e690cf65-12d5-401d-a4cd-9918cd68508d",
										"exec": [
											"",
											"",
											"// // Load lodash library code",
											"// const lodash = require('lodash');",
											"",
											"",
											"// //Select Random Allergy",
											"// var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
											"",
											"// pm.environment.set(\"allergyKB\",allergy);",
											"",
											"// // Select Random cuisine",
											"",
											"",
											"// var cuisine = lodash.sample([\"ndian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
											"",
											"// pm.environment.set(\"cuisineKB\",cuisine);",
											"",
											"// //select Random food preference",
											"",
											"// var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
											"",
											"// pm.environment.set(\"foodpref\",foodpref);",
											"",
											"",
											"// //Generate random contact number",
											"// let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
											"// pm.environment.set(\"phoneptKB\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
											"",
											"",
											"// //generate random email address",
											"",
											"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
											"// pm.environment.set(\"mailptKB\",mail);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ba9c033-6eee-40e3-a32e-127bf8fff318",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Status description",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code name is Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"",
											"pm.test(\"Error code shows INVALID_REQ_DATA\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_REQ_DATA\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows duplicate patient exists due to same Dob and contact number\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"lastName : User Last Name is Mandatory!\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "12a5626e-70b8-48f5-8ae4-93fcec0ceb99",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
										}
									]
								},
								"url": "{{BaseURL}}/patient"
							},
							"response": [
								{
									"id": "acc4dea4-d08d-4816-9276-92a826541d37",
									"name": "6.\tCreate New Patient Patient that already exists Mandatory Field LastName 404 Copy",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Connie\",\n\"LastName\":\"Mitchell\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c28-d3c7-46b0-be9b-23781b2180b5"
												}
											]
										},
										"url": "{{BaseURL}}/patient"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722739324&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XvXLroFIHhxgPfjPenZh0f7WAhgbREIlx6%2F%2FW8TRl%2Bc%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sun, 04 Aug 2024 02:42:04 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 674,\n    \"FirstName\": \"Connie\",\n    \"LastName\": \"Mitchell\",\n    \"Email\": \"Clemens22@hotmail.com\",\n    \"Allergy\": \"SESAME\",\n    \"FoodPreference\": \"JAIN\",\n    \"CuisineCategory\": \"mizo\",\n    \"FileMorbidity\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66aeea7cb8896d2890f49868\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 960,\n    \"Vitals\": {\n        \"66aeea7cb8896d2890f49868\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-04T02:42:04.194+00:00\"\n}"
								}
							]
						},
						{
							"name": "2. Update Patient invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c1de1fb-7093-40ce-928c-dcbe63770e62",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"",
											"//response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Error message shows patient not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows patient not found with Id 99\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient not found with patientId : 99\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "09407d65-9b74-4c31-b047-2289e1609c80",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Corbett\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1992-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0",
											"disabled": true
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": "{{BaseURL}}/patient/99"
							},
							"response": []
						},
						{
							"name": "3.Add New Reports with/without Vitals for existing Patient 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7deb8ac9-9e36-42a4-800d-c085e0db8a7b",
										"exec": [
											"",
											"let response = pm.response.json();",
											"// pm.environment.set(\"patientIdKB\", response.patientId);",
											"",
											"//Response time",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"//Check error message - single &  extended",
											"",
											"//Status Code is 400 & Description",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Status code name shows Not Found\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Error message shows patient not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"NOT_FOUND\");",
											"});",
											"",
											"",
											"pm.test(\"Error message shows patient not found with Id 99\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Patient not found with patientId : 99\");",
											"});",
											"",
											"",
											"",
											"// Content header check",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"",
											"//validation of content type",
											"pm.test('Content-Type Header is application-json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
											"})",
											"//Data type validation",
											"pm.test('All Data types are correct', () => {",
											"    pm.expect(response.errorCode).to.be.a('string');",
											"    pm.expect(response.errorMessage).to.be.a('string');",
											"})",
											"",
											"//check if all items are present",
											"",
											"",
											"var schema = {",
											"    properties: {",
											"    errorCode: {",
											"      type: \"string\",",
											"    },",
											"    errorMessage: {",
											"      type: \"string\",",
											"    },",
											"  },",
											"  required: [",
											"    \"errorCode\",",
											"    \"errorMessage\"",
											"  ],",
											"};",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b9f2ba34-590d-49d1-99bb-f6fe16a50298",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
										},
										{
											"key": "vitals",
											"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
											"type": "text"
										}
									]
								},
								"url": "{{BaseURL}}/patient/99"
							},
							"response": [
								{
									"id": "9d1a61d9-7814-41e1-8199-43d15048d48a",
									"name": "2.Add New Reports with/without Vitals for existing Patient Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "patientInfo",
													"value": "{ \"FirstName\": \"Patricia\",\n\"LastName\": \"Bennet\",\n\"ContactNumber\": \"{{phoneptKB}}\",\n\"Email\": \"{{mailptKB}}\",\n\"Allergy\": \"{{allergyKB}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisineKB}}\",\n\"DateOfBirth\": \"1980-01-01\"\n}\n",
													"type": "text"
												},
												{
													"key": "file",
													"type": "file",
													"src": "postman-cloud:///1ef51c3b-e7e3-4730-8555-d932e269dae0"
												},
												{
													"key": "vitals",
													"value": "{\n       “Weight“ : 168.1,\n       “Height” : 5.4,\n        “Temperature” : 98.6,\n        “SP” : 120,\n        “DP” : 80\n \n             \t}\n",
													"type": "text"
												}
											]
										},
										"url": "{{BaseURL}}/patient/{{patientIdKB}}"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Server",
											"value": "Cowboy"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722709129&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=uXAcgVbSlx78S8wPR4H5RLJdpG6KhzEHlyYRRFfqMUw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Vary",
											"value": "Origin"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Method"
										},
										{
											"key": "Vary",
											"value": "Access-Control-Request-Headers"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Xss-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store, max-age=0, must-revalidate"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000 ; includeSubDomains"
										},
										{
											"key": "X-Frame-Options",
											"value": "DENY"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Date",
											"value": "Sat, 03 Aug 2024 18:18:50 GMT"
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"patientId\": 529,\n    \"FirstName\": \"Patricia\",\n    \"LastName\": \"Bennet\",\n    \"ContactNumber\": \"2136345591\",\n    \"Email\": \"Vinnie.Collins@yahoo.com\",\n    \"Allergy\": \"WALNUT\",\n    \"FoodPreference\": \"NONVEG\",\n    \"CuisineCategory\": \"rajasthani\",\n    \"FileMorbidity\": {\n        \"66ae748ab8896d2890f49796\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        },\n        \"66ae7186b8896d2890f49784\": {\n            \"T3\": \"6.3 ng/mL\",\n            \"T4\": \"15.7 µg/dL\",\n            \"TSH\": \"0.016 µIU/mL\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66ae748ab8896d2890f49796\": \"Prediabetic \\n\",\n        \"66ae7186b8896d2890f49784\": \"Thyroid: Hyperthyroidism \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1980-01-01\",\n    \"DieticianId\": 942,\n    \"Vitals\": {\n        \"66ae7186b8896d2890f49784\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T18:05:58.164+00:00\"\n}"
								}
							]
						}
					],
					"id": "951d1390-bc10-4764-ba4c-38dac9ccd232"
				},
				{
					"name": "PostRequisites",
					"item": [
						{
							"name": "Delete Patient",
							"id": "68a5bccb-a933-42d3-b375-5abf1aaf4a2a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/patient/{{patientIdKB}}"
							},
							"response": []
						},
						{
							"name": "Logout Dietitian User",
							"id": "49f24196-acb4-4225-b24b-1efe17d3dd3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DietTokenKB}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/logoutdietician"
							},
							"response": []
						},
						{
							"name": "DELETE DIETITIAN created",
							"id": "dfd55536-5cab-4999-8f94-d4e89bd065b5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{BaseURL}}/dietician/{{dietid}}"
							},
							"response": []
						},
						{
							"name": "Logout Admin User",
							"id": "515dd6ea-274a-473d-8c6e-c5f9f1d8bb47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/logoutdietician"
							},
							"response": []
						}
					],
					"id": "23db8cde-efdf-48ea-9167-208b9acb438b"
				}
			],
			"id": "281e42fe-d5cc-4640-9205-e2deeebfa918"
		},
		{
			"name": "Patient-GET & DELETE",
			"item": [
				{
					"name": "Dietician Login",
					"id": "b333214e-cb83-4b95-8558-80a59883a529",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Carnation77\",\r\n  \"userLoginEmail\": \"api10@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "6006ea1d-8878-400f-855c-2eab83cc9992",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhcGkxMEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MzYxNTAsImV4cCI6MTcyMjY2NDk1MH0.8J_faVH4kSHUUjLlVbMFaiIz-m0HTchKFM67jkgaWP8JIUEZjG4zntL7AFO-LQJ8jQMImIqnYbucpUnw9gm1rw"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/patient"
					},
					"response": []
				},
				{
					"name": "CreateDietcian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fea6280e-bb02-4328-8153-3c44650d892f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtMTBAZ21haWwuY29tIiwiaWF0IjoxNzIyNTM4MTIyLCJleHAiOjE3MjI1NjY5MjJ9.7ALGV1S3lf64o6MQCt76-Z4dGGsr_-DRG4q2KZoKEejAgB2mpxnGCMwnmTXv9YRmL5ZXfZ6Kra_lgJzNjMB37w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9045783444\",\r\n  \"DateOfBirth\": \"2024-03-26T18:14:08.570Z\",\r\n  \"Education\": \"MBBS\",\r\n  \"Email\": \"api10@gmail.com\",\r\n  \"Firstname\": \"John\",\r\n  \"HospitalCity\": \"Carmel\",\r\n  \"HospitalName\": \"Ascension\",\r\n  \"HospitalPincode\": \"123456\",\r\n  \"HospitalStreet\": \"warren\",\r\n  \"Lastname\": \"Adam\"\r\n \r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/dietician"
					},
					"response": []
				},
				{
					"name": "Create Patient",
					"id": "eed53957-7984-4254-9fa1-3e53e54954b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhcGkxMEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MzYxNTAsImV4cCI6MTcyMjY2NDk1MH0.8J_faVH4kSHUUjLlVbMFaiIz-m0HTchKFM67jkgaWP8JIUEZjG4zntL7AFO-LQJ8jQMImIqnYbucpUnw9gm1rw"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"jaya\",\n\"LastName\": \"G\",\n\"ContactNumber\": \"9988775555\",\n\"Email\": \"test1@gmail.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1986-05-14\"\n}\n",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "e15azMbfN/Diabetic_and_Hemogram_Test_Thyrocare_lab.pdf[1].pdf"
								}
							]
						},
						"url": "{{BaseURL}}/patient"
					},
					"response": []
				},
				{
					"name": "New Request",
					"id": "47d30db1-3a4e-4d27-a9f5-cf428d48f42e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Fab33\",\r\n  \"userLoginEmail\": \"api@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician/login"
					},
					"response": []
				},
				{
					"name": "patient-morbidity",
					"id": "4f0bb02a-be49-482b-b1cc-94da6bb75080",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhcGkxMEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MzYxNTAsImV4cCI6MTcyMjY2NDk1MH0.8J_faVH4kSHUUjLlVbMFaiIz-m0HTchKFM67jkgaWP8JIUEZjG4zntL7AFO-LQJ8jQMImIqnYbucpUnw9gm1rw"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{BaseURL}}/patient/testReports/300"
					},
					"response": []
				}
			],
			"id": "83adc9cc-cfc0-4639-b11e-b7ef90e8992b"
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "AdminLogin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const token = responseBody.token;\r",
											"\r",
											"    pm.globals.set(\"BearerTokenadminn\", token);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"    pm.test(\"Content-Type is present\", function () {\r",
											"        pm.response.to.have.header(\"Content-Type\");\r",
											"    });\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"OK\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95faf019-af07-4515-b716-5412a8df94a0",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0963a031-0ba4-4f62-af70-efef1d621071",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{AdminPassword}}\",\r\n  \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/login"
							},
							"response": []
						},
						{
							"name": "GetALLDieticians",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "75654dff-d3e7-42ed-be23-ea75aad9336d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "CreateDietcian",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const id = responseBody.id;\r",
											"    const loginPassword = responseBody.loginPassword;\r",
											"    pm.globals.set(\"DieticianId\", id);\r",
											"    pm.globals.set(\"Dieticianpassword\", loginPassword);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"var expectedSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"loginPassword\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Firstname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Lastname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"ContactNumber\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"DateOfBirth\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Email\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalName\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalStreet\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalCity\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalPincode\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Education\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"id\",\r",
											"        \"loginPassword\",\r",
											"        \"Firstname\",\r",
											"        \"Lastname\",\r",
											"        \"ContactNumber\",\r",
											"        \"DateOfBirth\",\r",
											"        \"Email\",\r",
											"        \"HospitalName\",\r",
											"        \"HospitalStreet\",\r",
											"        \"HospitalCity\",\r",
											"        \"HospitalPincode\",\r",
											"        \"Education\"\r",
											"    ]\r",
											"};\r",
											"pm.test('Schema Validation', () => {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\"); // Changed to \"Created\"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the presence of required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    const requiredFields = [\r",
											"        \"id\", \r",
											"        \"loginPassword\", \r",
											"        \"Firstname\", \r",
											"        \"Lastname\", \r",
											"        \"ContactNumber\", \r",
											"        \"DateOfBirth\", \r",
											"        \"Email\", \r",
											"        \"HospitalName\", \r",
											"        \"HospitalStreet\", \r",
											"        \"HospitalCity\", \r",
											"        \"HospitalPincode\", \r",
											"        \"Education\"\r",
											"    ];\r",
											"    \r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Id should be an number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.id).to.be.an('number'); // Changed to 'integer'\r",
											"});\r",
											"\r",
											"pm.test(\"LoginPassword should be a string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Other fields should be strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    for (const key in responseData) {\r",
											"        if (key !== 'id' && key !== 'loginPassword') {\r",
											"            pm.expect(responseData[key]).to.be.a('string');\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "db030c4c-6cd6-4209-93a3-2909bf92bb4d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Update Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "df13c0b1-a9ae-410b-b1a9-0e719a1c8631",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "GetDieticianwithID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"    pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"});\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "251300a6-be4c-49cd-b836-4372deb0d174",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Delete dietcian By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"    \r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"var expectedSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"status\": { \"type\": \"string\" },\r",
											"        \"message\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"status\", \"message\"]\r",
											"};\r",
											"\r",
											"pm.test('Schema Validation', function () {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response message is a non-empty string\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response message should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7e82d2b0-2998-4bce-a14e-bf50d7fad076",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "CreateDietcian2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    const id = responseBody.id;\r",
											"    const loginPassword = responseBody.loginPassword;\r",
											"    const Email = responseBody.Email;\r",
											"    pm.globals.set(\"DieticianId2\", id);\r",
											"    pm.globals.set(\"Dieticianpassword2\", loginPassword);\r",
											"    pm.globals.set(\"DieticianEmail2\", Email);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"var expectedSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"id\": {\r",
											"            \"type\": \"integer\"\r",
											"        },\r",
											"        \"loginPassword\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Firstname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Lastname\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"ContactNumber\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"DateOfBirth\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Email\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalName\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalStreet\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalCity\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"HospitalPincode\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"Education\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\r",
											"        \"id\",\r",
											"        \"loginPassword\",\r",
											"        \"Firstname\",\r",
											"        \"Lastname\",\r",
											"        \"ContactNumber\",\r",
											"        \"DateOfBirth\",\r",
											"        \"Email\",\r",
											"        \"HospitalName\",\r",
											"        \"HospitalStreet\",\r",
											"        \"HospitalCity\",\r",
											"        \"HospitalPincode\",\r",
											"        \"Education\"\r",
											"    ]\r",
											"};\r",
											"pm.test('Schema Validation', () => {\r",
											"    pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\"); // Changed to \"Created\"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate the presence of required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    const requiredFields = [\r",
											"        \"id\", \r",
											"        \"loginPassword\", \r",
											"        \"Firstname\", \r",
											"        \"Lastname\", \r",
											"        \"ContactNumber\", \r",
											"        \"DateOfBirth\", \r",
											"        \"Email\", \r",
											"        \"HospitalName\", \r",
											"        \"HospitalStreet\", \r",
											"        \"HospitalCity\", \r",
											"        \"HospitalPincode\", \r",
											"        \"Education\"\r",
											"    ];\r",
											"    \r",
											"    requiredFields.forEach(field => {\r",
											"        pm.expect(responseData).to.have.property(field);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Id should be an number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.id).to.be.an('number'); // Changed to 'integer'\r",
											"});\r",
											"\r",
											"pm.test(\"LoginPassword should be a string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
											"});\r",
											"\r",
											"pm.test(\"Other fields should be strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    for (const key in responseData) {\r",
											"        if (key !== 'id' && key !== 'loginPassword') {\r",
											"            pm.expect(responseData[key]).to.be.a('string');\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ba7fa959-2193-44cc-b870-328d369a9c21",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						}
					],
					"id": "d46bd55e-e1df-4961-ad01-98d6539580d2"
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Create a Dietician without AdminbearerToken Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "3c4493d6-2275-4ef5-83b4-2b17104ea075",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  existing values in contactnumber and email id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"\r",
											"   \r",
											"    \r",
											" \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"var expectedSchema = {\r",
											"  \r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"errorCode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"errorMessage\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"errorCode\",\r",
											"    \"errorMessage\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"    });\r",
											"\r",
											"    pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											"\r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5f3b11e4-c4c0-4473-b29e-59604f2518a1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  MissingMandatory Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4bab634b-f7bd-49ea-9656-fb99a756a8fb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  Check if user able to create a Dietician with (less than 10 number in contact number field )",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "63fc932a-402f-4125-912b-1da1e7cce317",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician with  Check if user able to create a Dietician with invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fd6d3365-0180-43ec-8ade-595fd010b1e2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{InvalidEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician Checking   firstname and last field accept only alpahabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1ea34338-dcb2-4f31-bfcf-ec25d13dfc76",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{FirstnameN}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{LastnameN}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician, passing the DateOfBirth field without following the correct DateOfBirth format (yyyy-d-m).",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "49aeae6e-8d1a-4315-8e8b-2491ce089262",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthformat}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Dateofbirth field accept only Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d1f0fd46-636c-4d38-831e-df90c5bdae02",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthN}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Hospitalpincode field accept only 6digits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8871d9bd-224c-4db6-9c6e-18f4ff174788",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeN}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Create a Dietician,Check if the  Hospitalpincode field accept any alphabets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											";\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"   \r",
											"    \r",
											"\r",
											"   \r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0b08a1a2-1839-4d4a-9c08-3085d5cd75c3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeA}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician"
							},
							"response": []
						},
						{
							"name": "Update Dietician without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eee0be88-b720-421e-8ba2-055ea787f724",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Update Dietician with missing mandatory field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "32af23d6-bc66-40d1-9689-8b35463bd0d4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						},
						{
							"name": "Update Dietician with Invalid Dietician Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"NOT_FOUND\");\r",
											"});\r",
											"pm.test(\"Content-Type is present\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var expectedSchema = {\r",
											"\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"Firstname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Lastname\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"ContactNumber\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"DateOfBirth\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalStreet\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalCity\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"HospitalPincode\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"Education\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"Firstname\",\r",
											"    \"Lastname\",\r",
											"    \"ContactNumber\",\r",
											"    \"DateOfBirth\",\r",
											"    \"Email\",\r",
											"    \"HospitalName\",\r",
											"    \"HospitalStreet\",\r",
											"    \"HospitalCity\",\r",
											"    \"HospitalPincode\",\r",
											"    \"Education\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema Validation', () => {\r",
											"        pm.response.to.have.jsonSchema(expectedSchema);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test('Content-Type header is application/json', function () {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"    });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "10f541a4-3b12-4996-9f97-8389d94e45fd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{BearerTokenadminn}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BaseURL}}/dietician/{{DieticianId}}"
							},
							"response": []
						}
					],
					"id": "1086df2d-a189-411a-a2b5-4663259fdfe4"
				}
			],
			"id": "cc867dff-6a7c-496c-9444-829d2cc38b76"
		}
	],
	"variable": [
		{
			"key": "MorbidityTestName_Fasting_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Average_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Plasma_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_HBA1C",
			"value": ""
		},
		{
			"key": "thyroid_TSH ",
			"value": ""
		},
		{
			"key": "thyroid_T3",
			"value": ""
		},
		{
			"key": "thyroid_T4 ",
			"value": ""
		},
		{
			"key": "thyroid_TSH",
			"value": ""
		},
		{
			"key": "thyroid_T4",
			"value": ""
		}
	]
}