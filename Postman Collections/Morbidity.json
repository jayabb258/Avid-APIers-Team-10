{
	"info": {
		"_postman_id": "401e7bf0-2abc-41b6-95df-a455883b5303",
		"name": "Team-10 Avid APIers",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Dietician",
					"item": [
						{
							"name": "Positive Scenarios",
							"item": [
								{
									"name": "GetALLDieticians",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is application/json\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													"// Schema validation for the response\r",
													"pm.test(\"Schema is valid\", function () {\r",
													"    var schema = {\r",
													"        type: \"array\",\r",
													"        items: {\r",
													"            type: \"object\",\r",
													"            properties: {\r",
													"                id: { type: \"number\" },\r",
													"                Firstname: { type: \"string\" },\r",
													"                Lastname: { type: \"string\" },\r",
													"                ContactNumber: { type: \"string\" },\r",
													"                DateOfBirth: { type: \"string\" },\r",
													"                Email: { type: \"string\" }\r",
													"            },\r",
													"            required: [\"id\", \"Firstname\", \"Lastname\", \"ContactNumber\", \"DateOfBirth\", \"Email\"]\r",
													"        }\r",
													"    };\r",
													"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5ca41ea5-b075-4c7c-9548-8fb547d8c746",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "CreateDietcian",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"pm.test(\"Extract value and set global variable\", function () {\r",
													"    const responseBody = pm.response.json();\r",
													"    const id = responseBody.id;\r",
													"    const loginPassword = responseBody.loginPassword;\r",
													"    const Email = responseBody.Email;\r",
													"    pm.globals.set(\"DieticianId\", id);\r",
													"    pm.globals.set(\"Dieticianpassword\", loginPassword);\r",
													"    pm.globals.set(\"DieticianEmail\", Email);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"\r",
													"var expectedSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": {\r",
													"            \"type\": \"integer\"\r",
													"        },\r",
													"        \"loginPassword\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"Firstname\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"Lastname\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"ContactNumber\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"DateOfBirth\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"Email\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"HospitalName\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"HospitalStreet\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"HospitalCity\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"HospitalPincode\": {\r",
													"            \"type\": \"string\"\r",
													"        },\r",
													"        \"Education\": {\r",
													"            \"type\": \"string\"\r",
													"        }\r",
													"    },\r",
													"    \"required\": [\r",
													"        \"id\",\r",
													"        \"loginPassword\",\r",
													"        \"Firstname\",\r",
													"        \"Lastname\",\r",
													"        \"ContactNumber\",\r",
													"        \"DateOfBirth\",\r",
													"        \"Email\",\r",
													"        \"HospitalName\",\r",
													"        \"HospitalStreet\",\r",
													"        \"HospitalCity\",\r",
													"        \"HospitalPincode\",\r",
													"        \"Education\"\r",
													"    ]\r",
													"};\r",
													"pm.test('Schema Validation', () => {\r",
													"    pm.response.to.have.jsonSchema(expectedSchema);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Validate the presence of required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    const requiredFields = [\r",
													"        \"id\", \r",
													"        \"loginPassword\", \r",
													"        \"Firstname\", \r",
													"        \"Lastname\", \r",
													"        \"ContactNumber\", \r",
													"        \"DateOfBirth\", \r",
													"        \"Email\", \r",
													"        \"HospitalName\", \r",
													"        \"HospitalStreet\", \r",
													"        \"HospitalCity\", \r",
													"        \"HospitalPincode\", \r",
													"        \"Education\"\r",
													"    ];\r",
													"    \r",
													"    requiredFields.forEach(field => {\r",
													"        pm.expect(responseData).to.have.property(field);\r",
													"    });\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is present in the response\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Cache-Control header is present in the response\", function () {\r",
													"    pm.response.to.have.header(\"Cache-Control\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 300ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
													"});\r",
													"\r",
													"pm.test(\"Id should be an integer\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.id).to.be.an('number');\r",
													"});\r",
													"\r",
													"pm.test(\"LoginPassword should be a string\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
													"});\r",
													"\r",
													"pm.test(\"Other fields should be strings\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    for (const key in responseData) {\r",
													"        if (key !== 'id' && key !== 'loginPassword') {\r",
													"            pm.expect(responseData[key]).to.be.a('string');\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
												"exec": [
													"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number\r",
													"pm.environment.set(\"phoneDtN\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "40acb12f-118f-4dbe-b570-dbde16ab67c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{phoneDtN}}\",\r\n  \"DateOfBirth\": \"{{Dobdt1}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Update Dietician",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response has the required fields\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData.id).to.exist;\r",
													"    pm.expect(responseData.Firstname).to.exist;\r",
													"    pm.expect(responseData.Lastname).to.exist;\r",
													"    pm.expect(responseData.ContactNumber).to.exist;\r",
													"    pm.expect(responseData.DateOfBirth).to.exist;\r",
													"    pm.expect(responseData.Email).to.exist;\r",
													"    pm.expect(responseData.HospitalName).to.exist;\r",
													"    pm.expect(responseData.HospitalStreet).to.exist;\r",
													"    pm.expect(responseData.HospitalCity).to.exist;\r",
													"    pm.expect(responseData.HospitalPincode).to.exist;\r",
													"    pm.expect(responseData.Education).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"ContactNumber is in a valid format\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.ContactNumber).to.match(/^\\d{10}$/);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"var expectedSchema ={\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"Firstname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Lastname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"ContactNumber\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"DateOfBirth\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Email\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalStreet\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalCity\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalPincode\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Education\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"Firstname\",\r",
													"    \"Lastname\",\r",
													"    \"ContactNumber\",\r",
													"    \"DateOfBirth\",\r",
													"    \"Email\",\r",
													"    \"HospitalName\",\r",
													"    \"HospitalStreet\",\r",
													"    \"HospitalCity\",\r",
													"    \"HospitalPincode\",\r",
													"    \"Education\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"    pm.response.to.have.jsonSchema(expectedSchema);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type Header is application-json\", () => {\r",
													"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
												"exec": [
													"\r",
													"   "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "24c185f6-7b30-4d8f-9303-9ac07f2389b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "GetDieticianwithID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"var expectedSchema = {\r",
													"\"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"Firstname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Lastname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"ContactNumber\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"DateOfBirth\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Email\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalStreet\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalCity\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"HospitalPincode\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"Education\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"Firstname\",\r",
													"    \"Lastname\",\r",
													"    \"ContactNumber\",\r",
													"    \"DateOfBirth\",\r",
													"    \"Email\",\r",
													"    \"HospitalName\",\r",
													"    \"HospitalStreet\",\r",
													"    \"HospitalCity\",\r",
													"    \"HospitalPincode\",\r",
													"    \"Education\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													"    pm.test('Content-Type header is application/json', function () {\r",
													"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"    });\r",
													"});\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5e2d80d7-be55-4c31-a455-6b645b90e242",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "Delete dietcian By ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"\r",
													"    \r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"/*var expectedSchema = \r",
													"    {\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"message\": {\r",
													"      \"type\": \"string\",\r",
													"      \"pattern\": \"^Deleted dietician with id-\\\\d+$\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\"message\"],\r",
													"  \"additionalProperties\": false\r",
													"}\r",
													"pm.test('Schema Validation', function () {\r",
													"    pm.response.to.have.jsonSchema(expectedSchema);\r",
													"});*/\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response message is a non-empty string\", function () {\r",
													"    pm.expect(pm.response.text()).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response message should not be empty\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bcf4049a-e667-484d-9cba-0d46f6f2b7cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								}
							],
							"id": "5b9ed836-efca-4752-9996-49cd2247aca1"
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "Create a Dietician without AdminbearerToken Authentication",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response status code name is Unauthorized\", function () {\r",
													"    pm.expect(pm.response).to.have.status(401);\r",
													"    pm.expect(pm.response.status).to.equal('Unauthorized');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Content-Type header is present\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"pm.test(\"Response schema includes timestamp, status, error, and path properties\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    \r",
													"    pm.expect(responseData).to.be.an('object');\r",
													"    pm.expect(responseData).to.have.property('timestamp');\r",
													"    pm.expect(responseData).to.have.property('status');\r",
													"    pm.expect(responseData).to.have.property('error');\r",
													"    pm.expect(responseData).to.have.property('path');\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "ec78d7ac-aaf4-4a48-9bca-4f64f85ffea4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician with  existing values in contactnumber and email id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"\r",
													"\r",
													"   \r",
													"    \r",
													" \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"var expectedSchema = {\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errorCode\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"errorMessage\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errorCode\",\r",
													"    \"errorMessage\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													"\r",
													"    pm.test('Content-Type header is application/json', function () {\r",
													"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
													"    });\r",
													"\r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "b1cc92bb-0e31-4250-b08b-9b0417cc31a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician with  MissingMandatory Fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"      \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body has valid schema\", function () {\r",
													"  var schema = {\r",
													"    type: \"object\",\r",
													"    properties: {\r",
													"      contact: {\r",
													"        type: \"string\"\r",
													"      }\r",
													"    },\r",
													"    required: [\"contact\"]\r",
													"  };\r",
													"\r",
													"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "69ff9190-9e3b-48e0-b6b9-a3c728b5ae4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician with  Check if user able to create a Dietician with (less than 10 number in contact number field )",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"var expectedSchema = {\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"contact\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"contact\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0b7608a9-2086-4b62-a9c2-69a455dcfb72",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician with  Check if user able to create a Dietician with invalid email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"var expectedSchema = {\r",
													"  \r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"userLoginEmail\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"userLoginEmail\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "48c62a5e-a489-4828-b95f-cc636ec4af9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{InvalidEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician Checking   firstname and last field accept only alpahabets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"var expectedSchema = {\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"lastName\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"firstName\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"lastName\",\r",
													"    \"firstName\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "47ceff02-413d-45f7-9b76-de2aed3272c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{FirstnameN}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{LastnameN}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician, passing the DateOfBirth field without following the correct DateOfBirth format (yyyy-d-m).",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "0a6f00e7-8253-4e25-bee5-569f8224792a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthformat}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician,Check if the  Dateofbirth field accept only Numbers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "fc01876a-56c6-4ac8-8a84-e43c6971b2e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirthN}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician,Check if the  Hospitalpincode field accept only 6digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "bf538532-da54-436d-83a8-f9ea71e782f9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumberl}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeN}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Create a Dietician,Check if the  Hospitalpincode field accept any alphabets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													";\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"   \r",
													"    \r",
													"\r",
													"   \r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "61f099e9-4126-4c78-bbee-c306a821f948",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincodeA}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Update Diectician Without Authorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb7689d8-9fc9-471b-a8e2-9154d36116e3",
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "47cbb964-a3ce-4c0d-8f77-b364173b8182",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail2}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "Update Diectician With missing mandatory field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb7689d8-9fc9-471b-a8e2-9154d36116e3",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "c13b2b83-0220-4ceb-9ba8-c1cf14b7fcdb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "Update Dietician with Invalid Dietician Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"var expectedSchema={\r",
													"  \r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"errorCode\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"errorMessage\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"errorCode\",\r",
													"    \"errorMessage\"\r",
													"  ]\r",
													"}\r",
													"pm.test('Schema Validation', () => {\r",
													"        pm.response.to.have.jsonSchema(expectedSchema);\r",
													"    });\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e3c228f4-ad8a-4c9a-be04-87aaffe910cd",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "83a8852a-0293-484e-a856-54326b57ade4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ContactNumber\": \"{{UpdatedContactNumber}}\",\r\n  \"DateOfBirth\": \"{{UpdatedDateOfBirth}}\",\r\n  \"Education\": \"{{UpdatedEducation}}\",\r\n  \"Email\": \"{{DieticianEmail2}}\",\r\n  \"Firstname\": \"{{UpdatedFirstname}}\",\r\n  \"HospitalCity\": \"{{UpdatedHospitalCity}}\",\r\n  \"HospitalName\": \"{{UpdatedHospitalName}}\",\r\n  \"HospitalPincode\": \"{{UpdatedHospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{UpdatedHospitalStreet}}\",\r\n  \"Lastname\": \"{{UpdatedLastname}}\"\r\n \r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "All Dietician Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e79cf361-5b1c-497b-a2b9-add640918055",
												"exec": [
													"pm.test(\"Content-Type is present\", function () {\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"        pm.response.to.have.header(\"Content-Type\");\r",
													"    });\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"    "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "2fd2e64e-8ea0-4815-9196-503809664da0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician1"
									},
									"response": []
								},
								{
									"name": "DieticianID Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "884438d9-c4c7-46d0-9cf5-f5fb2089c7c7",
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6be6fa18-fa0a-4969-a27e-7b60170405c0",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "75ac1054-4ebd-48e4-b4a6-05bd4d9d7068",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								},
								{
									"name": "DietcianID Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13cf1ad7-1f9e-4fe3-b38a-4ffbf9e2421c",
												"exec": [
													"pm.test(\"Content-Type is present\", function () {\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"        pm.response.to.have.header(\"Content-Type\");\r",
													"    });\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"    "
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "5a75872a-a567-42f6-8c09-443b3186c7eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{AdminToken}}"
											}
										},
										"method": "DELETE",
										"header": [],
										"url": "{{BaseURL}}/dietician/{{DieticianId}}"
									},
									"response": []
								}
							],
							"id": "36b6a6f8-e7fc-46fe-aaad-912cebc00261"
						},
						{
							"name": "Dietician Controlller",
							"item": [
								{
									"name": "Get all dieticians",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a043726-44a7-42ad-aa9a-78915cf1f0f5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "f6cd98cd-0f24-430e-a37b-377f94f6aeca",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{DieticianToken2}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{BaseURL}}/dietician"
									},
									"response": []
								},
								{
									"name": "Get with Dieticianid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a043726-44a7-42ad-aa9a-78915cf1f0f5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "6c3e8f5c-7621-47ad-b97e-94563c439544",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{DieticianToken2}}"
											}
										},
										"method": "GET",
										"header": [],
										"url": "{{BaseURL}}/dietician/{{DieticianId2}}"
									},
									"response": []
								}
							],
							"id": "3c4f0f6b-fc4e-4b3f-82ca-1f31450fd17f"
						}
					],
					"id": "4d22cae5-9e79-4015-b336-c8e331592c97"
				},
				{
					"name": "Admin User Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"AdminToken\", token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"});\r",
									"\r",
									"//pm.execution.setNextRequest(\"Gather Dietitian Credentials\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd404be5-f558-425d-980a-25ed82264b42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\":\"{{AdminPassword}}\",\r\n  \"userLoginEmail\":\"{{AdminEmail}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "CreateDietcian2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e3dbf6b-caaa-433b-b4d7-922d29ce63dc",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const id = responseBody.id;\r",
									"    const loginPassword = responseBody.loginPassword;\r",
									"    const Email = responseBody.Email;\r",
									"    pm.globals.set(\"DieticianId2\", id);\r",
									"    pm.globals.set(\"Dieticianpassword2\", loginPassword);\r",
									"    pm.globals.set(\"DieticianEmail2\", Email);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"var expectedSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"loginPassword\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalStreet\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalCity\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalPincode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Education\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"loginPassword\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\",\r",
									"        \"HospitalName\",\r",
									"        \"HospitalStreet\",\r",
									"        \"HospitalCity\",\r",
									"        \"HospitalPincode\",\r",
									"        \"Education\"\r",
									"    ]\r",
									"};\r",
									"pm.test('Schema Validation', () => {\r",
									"    pm.response.to.have.jsonSchema(expectedSchema);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\"); // Changed to \"Created\"\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the presence of required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    const requiredFields = [\r",
									"        \"id\", \r",
									"        \"loginPassword\", \r",
									"        \"Firstname\", \r",
									"        \"Lastname\", \r",
									"        \"ContactNumber\", \r",
									"        \"DateOfBirth\", \r",
									"        \"Email\", \r",
									"        \"HospitalName\", \r",
									"        \"HospitalStreet\", \r",
									"        \"HospitalCity\", \r",
									"        \"HospitalPincode\", \r",
									"        \"Education\"\r",
									"    ];\r",
									"    \r",
									"    requiredFields.forEach(field => {\r",
									"        pm.expect(responseData).to.have.property(field);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Id should be an number\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.be.an('number'); // Changed to 'integer'\r",
									"});\r",
									"\r",
									"pm.test(\"LoginPassword should be a string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.loginPassword).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Other fields should be strings\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    for (const key in responseData) {\r",
									"        if (key !== 'id' && key !== 'loginPassword') {\r",
									"            pm.expect(responseData[key]).to.be.a('string');\r",
									"        }\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9bacf7ad-1cad-40bb-a5e3-fe34e9d8bc98",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d422e917-9e37-47ff-b0b7-fa85df4f5755",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdminToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{ContactNumber}}\",\r\n  \"DateOfBirth\": \"{{DateOfBirth}}\",\r\n  \"Education\": \"{{Education}}\",\r\n  \"Email\": \"{{$randomEmail}}\",\r\n  \"Firstname\": \"{{Firstname}}\",\r\n  \"HospitalCity\": \"{{HospitalCity}}\",\r\n  \"HospitalName\": \"{{HospitalName}}\",\r\n  \"HospitalPincode\": \"{{HospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{HospitalStreet}}\",\r\n  \"Lastname\": \"{{Lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/dietician"
					},
					"response": []
				},
				{
					"name": "DieticianControllerlogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d7f31aa-4a5d-4fd6-9d7d-423874b98716",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"DieticianToken2\", token);\r",
									"\r",
									"\r",
									"\r",
									"});pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Create New Patient2\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"DieticianToken2\", token);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Set the next request to 'Create New Patient2'\", function () {\r",
									"    pm.execution.setNextRequest(\"Create New Patient2\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9306532d-fcc7-4f9e-bab4-7ff8d8953562",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "20511210-767f-43fd-ba83-5a37cbc52a61",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{AdminToken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\":\"{{Dieticianpassword2}}\",\r\n  \"userLoginEmail\":\"{{DieticianEmail2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Create New Patient2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdafeb03-c004-4f74-8c66-0b02f0793a89",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"     const Email = responseBody.Email;\r",
									"    const patientId = responseBody.patientId;\r",
									"    pm.globals.set(\"PatientEmail2\",Email );\r",
									"    pm.globals.set(\"PatientId2\", patientId);\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d46f3e28-5adc-46a7-9e81-bdd6bca5803f",
								"exec": [
									"",
									"",
									"// Load lodash library code",
									"const lodash = require('lodash');",
									"",
									"",
									"//Select Random Allergy",
									"var allergy = lodash.sample([\"SOY\", \"ALMOND\", \"WALNUT\", \"PISTACHO\", \"SESAME\", \"PECAN\", \"CASHEW\", \"PEANUT\", \"EGG\", \"MILK\", \"NONE\"]);",
									"",
									"pm.environment.set(\"allergyKB1\",allergy);",
									"",
									"// Select Random cuisine",
									"",
									"",
									"var cuisine = lodash.sample([\"indian\", \"south indian\", \"rajasthani\", \"punjabi\", \"bengali\", \"orissa\", \"gujarati\", \"maharashtrian\", \"andhra\", \"kerala\", \"goan\", \"kashmiri\", \"himachali\", \"tamil nadu\", \"karnataka\", \"sindhi\", \"chhattisgarhi\", \"madhya pradesh\", \"assamese\", \"manipuri\", \"tripuri\", \"sikkimese\", \"mizo\", \"arunachali\", \"uttarakhand\", \"haryanvi\", \"awadhi\", \"bihari\", \"uttar pradesh\", \"delhi\", \"north indian\", \"italian\", \"french\", \"arabic\", \"lebanese\", \"thai\", \"mexican\", \"american\"]);",
									"",
									"pm.environment.set(\"cuisineKB1\",cuisine);",
									"",
									"//select Random food preference",
									"",
									"var foodpref = lodash.sample([\"VEGAN\", \"VEGETARIAN\", \"JAIN\", \"EGGETARIAN\", \"NONVEG\"]);",
									"",
									"pm.environment.set(\"foodpref1\",foodpref);",
									"",
									"",
									"//Generate random contact number",
									"let phn = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");// Generate random phone number",
									"pm.environment.set(\"phoneptKB1\", phn.replace(/[^0-9.]+/g,\"\"));// remove hyphens",
									"",
									"",
									"// //generate random email address",
									"",
									"// let mail = pm.variables.replaceIn(\"{{$randomEmail}}\");// Generate random email",
									"// pm.environment.set(\"mailptKB\",mail);",
									"",
									"//generate random DOB",
									"",
									"// var moment = require(\"moment\");",
									"// pm.environment.set(\"DOBkb\", moment().subtract(18, \"years\").format((\"YYYY-MM-DD\")));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8ea32ca8-5a27-4068-92fe-de18e14146a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DieticianToken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"{{firstNamePat1}}\",\n\"LastName\": \"{{lastNamePat1}}\",\n\"ContactNumber\": \"{{phoneptKB1}}\",\n\"Email\": \"{{PatientEmail}}\",\n\"Allergy\": \"{{allergyKB1}}\",\n\"FoodPreference\": \"{{foodpref1}}\",\n\"CuisineCategory\":\"{{cuisineKB1}}\",\n\"DateOfBirth\": \"{{DOB}}\"\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1ef538fb-527f-4c20-ac44-8c5c1d22a3be"
								}
							]
						},
						"url": "{{BaseURL}}/patient"
					},
					"response": []
				},
				{
					"name": "Patientlogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2f8bf70-1685-4f79-9a54-20533e410e1d",
								"exec": [
									"pm.test(\"Extract value and set global variable\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    const token = responseBody.token;\r",
									"\r",
									"    pm.globals.set(\"PatientToken2\", token);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f2eebef4-b559-4744-aa54-2d6feb8ad055",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{DieticianToken2}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{AdminPassword}}\",\r\n  \"userLoginEmail\": \"{{PatientEmail2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Patient Login Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aece70e2-160a-4530-8619-6f3b9479ef4c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"invalidPassword\",\r\n  \"userLoginEmail\": \"invalid@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Admin User Login with invalid credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7e2210a4-388e-4d98-9fe0-07ccbca6e48d",
								"exec": [
									"pm.globals.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de052572-67c1-4992-9098-3c46b5bf58bb",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b4038bd3-7f8a-4b4e-aeb0-5229c20846d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"invalidPassword\",\r\n  \"userLoginEmail\": \"invalid@email.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/login"
					},
					"response": []
				}
			],
			"id": "513eaa1c-4f7f-46ab-b199-bb43bd217268",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8d5d4647-187b-4fd9-b99c-a04b156d9068",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8789d544-00e8-4c13-a1ce-4e4b5238d2cd",
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "GET AllMorbidities -200- AS ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     \r",
											"    if(i===2)\r",
											"    {\r",
											"      \r",
											"          console.log('morbidity name',responseBody[i].morbidityTestName) \r",
											"\r",
											" pm.globals.set(\"morbidity_test_name\", responseBody[i].morbidityTestName)\r",
											"}\r",
											"\r",
											"}\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5d6d5ca7-d1a4-414b-a37a-236f4d58f3b8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET AllMorbidities -200- AS DIETICIAN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "824122c3-d3be-4d68-97ff-99b109d0ef0d",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// pm.test(\"Response time is less than 100ms\", function () {\r",
											"//     pm.response.to.have.responseTimeBelow(500);\r",
											"// });\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.environment.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.environment.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.environment.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_TSH',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"}\r",
											"})\r",
											"\r",
											"// const testUtil = pm.require(\"morbidity_module_testutil\");\r",
											"\r",
											"// testUtil.commonTest(\"GET\",\"content-type header\");\r",
											"// testUtil.commonTest(\"GET\",\"content-type response\");\r",
											"// testUtil.commonTest(\"GET\",\"response time\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf1b7ea9-33bb-4302-bc47-da4a804e895b",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7cfe48de-2b57-4052-8014-f87d91e0bf2c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e81fa7f4-8b31-447d-9b63-3fcc6a77141b",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aba9ef7a-7ed0-434f-b785-0099d46ba2cc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_HBA1C}}"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e81fa7f4-8b31-447d-9b63-3fcc6a77141b",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7cbc9434-3f67-43ca-80dc-a85691542659",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_HBA1C}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73f4a42f-ebe0-4181-ae0e-f87c44a2a612",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "32d1a37c-736d-4424-a7cd-0cd7eed553ec",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Average_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73f4a42f-ebe0-4181-ae0e-f87c44a2a612",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cf40cd61-5806-4111-9ee3-b8ca0a81a78f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Average_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe1f6f8-3989-4110-b090-2231489f4d06",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "61b983af-6630-494c-9d95-4673a6065626",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Fasting_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fe1f6f8-3989-4110-b090-2231489f4d06",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c3cb41ad-189c-4bfe-8505-988fb7eac7a8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Fasting_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ddc4d1a-dfaa-4d69-913e-888d9fe4c7ef",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d474f0de-cb0a-414e-ad9a-657a9c5d55c5",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5afb5fe2-64f7-498e-81dc-e2215e6c0a3c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Plasma_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ddc4d1a-dfaa-4d69-913e-888d9fe4c7ef",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d474f0de-cb0a-414e-ad9a-657a9c5d55c5",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"     \r",
											"  //pm.environment.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c727b669-197c-41d8-93c4-32fb652ad9ba",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName_Plasma_G}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69dbb6c8-4a6b-4ed6-bfdf-67d896dcd0e9",
										"exec": [
											"const thyroidT4=pm.environment.get('thyroid_T4');\r",
											"if(thyroidT4==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T4',T4)\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6ca2b6c-6d0e-495f-8d59-c7cd79740211",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "eb3cdbf5-1cf2-4ef0-94cf-82a277060391",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T4}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4 AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69dbb6c8-4a6b-4ed6-bfdf-67d896dcd0e9",
										"exec": [
											"const thyroidT4=pm.environment.get('thyroid_T4');\r",
											"if(thyroidT4==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T4',T4)\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6ca2b6c-6d0e-495f-8d59-c7cd79740211",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "251d9ff6-d20b-41fc-a3fe-df4cda9c30b4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T4}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "950286ed-c4e7-4d15-8c3a-10d84ce81c0b",
										"exec": [
											"const thyroidT3=pm.environment.get('thyroid_T3');\r",
											"if(thyroidT3==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T3',T3)\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c316b173-2b6c-4d5c-a23e-7e972532d41a",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ff544178-d19e-4fab-a88c-f61f734694ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T3}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3 AS Dietician",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "950286ed-c4e7-4d15-8c3a-10d84ce81c0b",
										"exec": [
											"const thyroidT3=pm.environment.get('thyroid_T3');\r",
											"if(thyroidT3==undefined)\r",
											"{\r",
											"\r",
											"pm.environment.set('thyroid_T3',T3)\r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c316b173-2b6c-4d5c-a23e-7e972532d41a",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"// pm.test(\"Response time is less than 1000ms\", function () \r",
											"// {\r",
											"//      pm.response.to.have.responseTimeBelow(500);\r",
											"\r",
											"//  });\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f9b72e98-ae70-4982-a492-ab63b6483401",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_T3}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test TSH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b43faf76-5fce-4117-ad37-e5badf6993c3",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "520976f2-8390-41bf-b129-54a4bde17efa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_TSH}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test TSH AS Dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b43faf76-5fce-4117-ad37-e5badf6993c3",
										"exec": [
											"pm.test(\"Content-Type Header is present\",()=>\r",
											"{\r",
											"     pm.response.to.have.header(\"Content-Type\")\r",
											"});\r",
											"pm.test(\"Content-Type Header is application/json\",()=>\r",
											"{\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json')\r",
											"})\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											" const expectedJsonSchema=\r",
											" {\r",
											" \r",
											"  \"type\": \"array\",\r",
											"  \"properties\": {\r",
											"    \"morbidityId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"morbidityTestId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityNameRegex\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityTestUnit\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"morbidityMarkerMinVal\": {\r",
											"      \"type\": \"number\"\r",
											"    },\r",
											"    \"morbidityMarkerMaxVal\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"morbidityId\",\r",
											"    \"morbidityTestId\",\r",
											"    \"morbidityNameRegex\",\r",
											"    \"morbidityTestName\",\r",
											"    \"morbidityTestUnit\",\r",
											"    \"morbidityMarkerMinVal\",\r",
											"    \"morbidityMarkerMaxVal\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Verify JsonSchema \",function()\r",
											"{\r",
											"pm.response.to.have.jsonSchema(expectedJsonSchema);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"\r",
											"\r",
											"});\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											" // pm.environment.set('thyroid_T4',responseBody[i].morbidityTestName);\r",
											" \r",
											"}\r",
											"    }\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8334133d-c877-4089-b27c-d2ead5d86365",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{thyroid_TSH}}"
							},
							"response": []
						}
					],
					"id": "0c4fabc2-5a70-4aa0-906e-2dff2ef8d58d"
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "GET operation -200- AS ADMIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27be77a2-f359-418c-b495-c57f466f2dbb",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9deee48a-08f3-40bb-9abc-560afcaecb67",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "17a6d95e-8bb0-40b6-a791-30af74fd746b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET Morbidities with valid PatientToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbcdfa96-f59f-4a00-9429-9a2b77463a49",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.collectionVariables.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_TSH ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T4 ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											"}})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2853ea7e-abcc-4cea-bed6-734ed154311b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{Bearertk}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "GET AllMorbidities withinvalid endpoint- AS DIETICIAN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbcdfa96-f59f-4a00-9429-9a2b77463a49",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"\r",
											"    for(i=0;i<responseBody.length;i++){\r",
											"     //define an array in Javascript. Use Set instead\r",
											"\r",
											"   //  pm.collectionVariables.set('MorbidityTestNames',responseBody[i].morbidityTestName);\r",
											"    if(responseBody[i].morbidityTestName==='Fasting Glucose')\r",
											"    {\r",
											"         pm.collectionVariables.set('MorbidityTestName_Fasting_G',responseBody[i].morbidityTestName);\r",
											"      \r",
											"          console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"}\r",
											" if (responseBody[i].morbidityTestName==='Average Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Average_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='Plasma Glucose')\r",
											"{\r",
											"  pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='HbA1c')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('MorbidityTestName_HBA1C',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='TSH')\r",
											"{\r",
											"    // console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_TSH ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T3')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T3',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											" if (responseBody[i].morbidityTestName==='T4')\r",
											"{\r",
											"     console.log('morbidity name-------',responseBody[i].morbidityTestName) \r",
											"  pm.collectionVariables.set('thyroid_T4 ',responseBody[i].morbidityTestName);\r",
											" // pm.collectionVariables.set('MorbidityTestName_Plasma_G',responseBody[i].morbidityTestName);\r",
											"}\r",
											"\r",
											"\r",
											"}})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2fe47ebe-1b89-4e3a-bafb-881ba3586c54",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						},
						{
							"name": "Retrieve Morbidity with wrong testname",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d2ac6e9-e4b3-442d-87d0-3fc54d7dc0bb",
										"exec": [
											"//First do pm.collectionVariables.get('arrayname')\r",
											"const testNameMap =pm.collectionVariables.get('MorbidityTestNames');\r",
											"//const data=pm.collectionVariables.get('MorbidityTestNames');\r",
											"\r",
											"console.log(testNameMap);\r",
											"\r",
											"function getTestNameById(MorbidityId) {\r",
											"\r",
											"    for(i=0;i<testNameMap.length;i++)\r",
											"    {\r",
											"        const morbidity_id=testNameMap[i].morbidityId;\r",
											"        console.log('morbidity_id---',morbidity_id);\r",
											"        if(morbidity_id==='DIA_FG')\r",
											"        {\r",
											"            console.log('testNameMap[i].morbidityTestName',testNameMap[i].morbidityTestName);\r",
											"    pm.collectionVariables.set('MorbidityTestNames',testNameMap[i].morbidityTestName);\r",
											"        }\r",
											"\r",
											"\r",
											"       // console.log('morbidity name',responseBody[i].morbidityTestName)\r",
											"       // if(testNameMap[i].MorbidityIdmorbidityTestName)\r",
											"    }\r",
											"//    // const item = testNameMap.find(obj => obj.morbidityTestId === MorbidityId);\r",
											"//    console.log('MorbidityId',MorbidityId)\r",
											"// console.log('found morbity test nameeeeeeeeeeeee',item)\r",
											"//     return item ? item.morbidityTestName : null; // Return null if not found\r",
											"}\r",
											"\r",
											"// Example usage\r",
											"// const morbidityTestName = getTestNameById(\"DIA_FG\");\r",
											"// console.log(morbidityTestName);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53d2e935-30d4-45fe-b3a7-54cb2e6e6b28",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dc943899-d83c-47be-a9d8-f427fc36922b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/fever"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid  invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1200a1a5-91fc-448f-b700-91115d1ee287",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f7ee619d-68e1-44c3-b7a7-906e70b12500",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/TSHh"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T3 with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9207d2fb-abda-4fb6-ac63-89028a3a6ec1",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "679f37f1-eaa8-4da6-bccd-9538e31bb0cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/T3333333"
							},
							"response": []
						},
						{
							"name": "Retrieve Thyroid Test T4 with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7510da9d-81ac-4de4-b313-454ac009c06a",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "edc23bd5-cf7e-41a5-9444-a8692024786f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/T444"
							},
							"response": []
						},
						{
							"name": "Retrieve DiabetesTest HBA1C negativeTesting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b093a02a-0a35-4e93-a737-d7100e6002d1",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "82e3f49c-e54e-425a-adf1-f8f0b692944f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/{{MorbidityTestName}}"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Average Glucose with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38807993-9edb-43ec-be5a-dc327c7ab885",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "733e5d0b-1f4d-4c55-a1fd-0dc5fec89df0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/avg glucos"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test Fasting Glucose with invalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58bb5d1b-a56c-4f41-920f-835aca16f794",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aefb3270-b733-43fe-bf06-9e282c7e8f84",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/fasting glucose123"
							},
							"response": []
						},
						{
							"name": "Retrieve Diabetes Test  Plasma Glucose with inavalid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40738e37-4bad-47c8-b614-bcc2ae270bc9",
										"exec": [
											"pm.test(\"Extract value and set global variable\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    console.log('pm.response',pm.response.json())\r",
											"    pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"     })\r",
											"    })\r",
											"\r",
											"\r",
											" pm.test(\"Get error Message from response:-> Morbidity not found with MorbidityTestName \",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorMessage) {\r",
											"    console.error('Error------', responseBody.errorMessage);\r",
											"}\r",
											"})\r",
											"\r",
											" pm.test(\"Get error errorCode: NOT_FOUND\",()=>\r",
											"{\r",
											"   var responseBody = pm.response.json();\r",
											"\r",
											"// Extract and log the error message if present\r",
											"if (responseBody.errorCode) {\r",
											"    console.error('errorCode------', responseBody.errorCode);\r",
											"}\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "759e9d97-e1b3-4458-9d3e-b2e22d011107",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{AdminToken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity/plasma glucoseeee"
							},
							"response": []
						},
						{
							"name": "GET using Dietician Token",
							"id": "5ca38526-2e37-4239-b645-e6eec8425f24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{DieticianToken2}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{BaseURL}}/morbidity"
							},
							"response": []
						}
					],
					"id": "04ccc54a-5c4b-4625-bfff-512e351af8a1"
				}
			],
			"id": "987a9a55-271e-4066-915d-ef97a3cae6b6"
		}
	],
	"variable": [
		{
			"key": "MorbidityTestName_Fasting_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Average_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_Plasma_G",
			"value": ""
		},
		{
			"key": "MorbidityTestName_HBA1C",
			"value": ""
		},
		{
			"key": "thyroid_TSH ",
			"value": ""
		},
		{
			"key": "thyroid_T3",
			"value": ""
		},
		{
			"key": "thyroid_T4 ",
			"value": ""
		},
		{
			"key": "thyroid_TSH",
			"value": ""
		},
		{
			"key": "thyroid_T4",
			"value": ""
		},
		{
			"key": "Bearertk",
			"value": ""
		}
	]
}